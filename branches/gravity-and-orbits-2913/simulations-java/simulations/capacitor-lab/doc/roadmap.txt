================================================================================================================
Capacitor Lab: roadmap and notes for developers
================================================================================================================

I'd recommend starting with the model of circuits and their components:

ICircuit, AbstractCircuit, and its subclasses
Battery
Capacitor
Wire and its subclasses

... then move on to the various measurement devices:

BarMeter and its subclasses
Voltmeter
EFieldDetector

Misc notes:

- Subclasses of AbstractCircuit and Wire all have circuit topology diagrams in their class documentation.
Labels in the diagrams match the labels used in the design document, and you may find these useful for
determining which capacitors are in series or parallel, which wires connect to which components, etc.

- Model units are meters, Farad, Coulombs, Volts and Joules.  These are not ideal units for working at this scale,
but they match the design document, and this was the team's preference.  Consequently, you'll see small model values
in the code, like 0.005 meters for plate separation.

- This sim uses a pseudo-3D perspective, essentially a projection with no vanishing point.
See CLModelViewTransform3D to familiarize yourself with the orientation of the coordinate system.
Turning 3D descriptions into 2D projections is handled in BoxShapeFactory.

- Measurement of voltage and E-field is done via intersection of shapes. (For example, does the shape of the
positive voltmeter probe intersect the top terminal of the battery?) The shapes for circuit components are created
by the model elements. In a strict MVC architecture, it would be preferable to keep shapes out of the model.
But in this sim, handling shapes in the model simplified both the model and the view.

- Package structure is identical to how I've organized all of my sims: Globally-useful stuff is at the top level.
Shared classes are broken into model, view and control packages (and subpackages), roughly corresponding to their
role in MVC. Developer stuff is in the developer package.  Each tab has its own package that contains the stuff
that's specific to that tab: module, canvas, model and control panel.

- As noted in the javadoc, there is some duplication between DielectricCanvas and MultipleCapacitorsCanvas,
and DielectricModel and MultipleCapacitorsModel. This is because: (1) the Dielectric tab was implemented in
1.00 without knowledge of the Multiple Capacitors tab, and (2) these 2 tabs are just different enough that
trying to move more stuff into the base class makes things messy. So in these 2 cases, I'm willing to live
with a bit of duplication. This is far better than the original suggestion of developing the Multiple Capacitors
tab as an entirely separate entity.  The entire sim uses the same set of model, view and control components.

- Dragging is constrained to the bounds of the play area using the WorldBounds property. This worked out
very nicely for this sim. But as noted in the WorldBounds constructor, a questionable aspect of this approach
is that we start with empty bounds until the canvas is realized. More discussion of a unified approach should
continue in Unfuddle #2826, but I see no reason to change the approach used in this sim.

- You'll see cleanup method stubs throughout the view code, marked with "//FUTURE" comments. These cleanup methods
are currently unnecessary because the model and view objects have identical lifetimes; that is, each circuit has
a model and view, and both the model and view persist for the entire runtime of the sim. If this every changes,
the cleanup methods serve to document what needs to be done to disconnect the view from the model (to prevent memory leaks.)

- Version 1.00 was developed when our convention for Property field names was to use a "Property" suffix,
eg "visibleProperty". While adding 2.00 features, I stuck with this convention, rather than trying to
change existing code or use an inconsistent naming scheme.

- In some cases (mostly in the model) I violated Java's naming conventions in order to match names to
the design document. For example, I used capital V for voltage. I tried to note these violations in
the class doc (see for example SingleCircuit) but may have missed some cases.

- There is sparse use of double-brace initialization (DBI). You'll see it in collections initialization,
but not many other places. Keep in mind that the majority of this code preceded PhET's "discovery" of DBI,
and I saw no reason to change existing code.

================================================================================================================