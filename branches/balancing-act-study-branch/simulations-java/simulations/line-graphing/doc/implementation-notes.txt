********************************** Graphing Lines simulation ***************************************

This document provides implementation notes for the "Graphing Lines" simulation. The target audience
is software developers who need to review, enhance or maintain the simulation.

Before reading this document, it's recommended that you read the model description in model.txt.

The design document (GraphingLines.pdf) probably won't be of much help. With the exception of
challenge generation for the game, many (most?) parts of the document are stale. If you find
differences between the implementation and the Google design document, the document should be
considered suspect.

Package structure under edu.colorado.phet.linegraphing:
- "common" subpackage is used by >1 module
- other subpackages are organized by module. For example, "linegame" is the "Line Game" module.
- subpackages are further divided into model and view packages

Naming conventions:
- classes with prefix "LG" (for Line Graphing) contain constants for the entire project
- classes with prefix "LineForms" are used by the 3 modules that deal with line forms: Slope,
  Slope-Intercept, and Point-Slope

Terminology:
- "manipulators" are the spheres on the graph that the user drags to change some property of a line
- "challenges" are the individual problems that the user tries to solve in the game

Property<T> is used throughout the model and view for storage of properties and notification of changes.
The sim has both model-specific properties (found throughout the model) and view-specific properties
(encapsulated in LineFormsViewProperties).

Line is the primary model class used in all modules. See Line's class javadoc and model.txt for details.

Model-view transforms are used throughout the simulation to map between model and view coordinate
frames. The origin for model and view is at the (0,0) point on the graph.

For the purposes of view layout, the origin of view components is generally described in each
component's javadoc. If the origin isn't documented, you can assume the Piccolo default (upper-left).

I find that I frequently need to change the rendering order and layout of nodes and canvases.
To make this easier, node and canvas constructors typically have this structure:

      public MyNode(...) {

          // instantiate nodes

          // set rendering order (addChild)

          // do layout (setOffset)

          // register property observers
      }

The most complicated code in the sim deals with rendering of interactive and non-interactive
equations. The design team was very particular about the layout and look of these equations,
and the equations must dynamically change their layout based on what parts of the equation are
interactive and how the equation would simplify. See EquationNode and its subclasses for details.
TestEquationNodes provides a standalone test harness.

Challenges are generated using the Factory pattern, with one factory for each game level.
For example, ChallengeFactory1 handles challenge generation for game level 1.

Challenge generation is specified (by level) in the Google design document. The specification
is quite complicated, and sometimes vague or ambiguous. I attempted to provide a correspondence
between the source code and the design document. Generation of each specific challenge described
in the design document is bracketed by curly braces. For example, in ChallengeFactory1:

        // Graph-the-Line, slope-intercept form, slope is variable
        {
            //... code here
        }

****************************************************************************************************
