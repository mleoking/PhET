<!--
IDEA dependent build script! This script's succesful execution depends on
properties being set by IDEA before it is run. Do this by adding the
project classpath in the Build Properties dialog.
In addition, the copyclasspath task is found in a jar that Sam wrote. The
jar and the ant distribution jar must also be included in the classpath.
The name of the jar is currently antscripttest<xxx>.jar.

To create a jar than can be executed directly, the build.properties file
should define the variable ${main.class}

Properties expected to be set exteernal to this script (typically, in
build.properties):
main.class
distname
projectname
version
ignorepath      (those elements of the ant classpath that should not be
                included in the dependecy list for this project)


-->

<project name="General Ant Build Script" default="Generate Jar" basedir=".">

    <!-- Project specific properties   -->
    <property file="build.properties"/>
    <!-- Created automatically for this project. Never modify this file-->
    <property file="build.number"/>

    <!--  Set ant output directories. They get made if they don't exist -->
    <property name="project_home" value=".."/>
    <property name="ant.output" value="${project_home}/ant_output"/>
    <property name="classes" location="${ant.output}/classes"/>
    <property name="jars" location="${ant.output}/jars"/>
    <property name="javadoc" location="${ant.output}/javadoc"/>
    <property name="lib" location="${ant.output}/lib"/>

    <!-- Set current sister directories, for backup and release data. -->
    <property name="development" location="${project_home}"/>
    <property name="backup" location="${project_home}/backup"/>
    <property name="releases" location="${project_home}/releases"/>

    <!-- Set up child directories, for during the build.  -->
    <property name="src" location="${development}/src"/>
    <property name="data" location="${development}/data"/>

    <description>
        Build File.
    </description>

    <target name="init">
        <tstamp/>
    </target>

    <!--    Backup source-->
    <target name="Backup Source" depends="init">
        <mkdir dir="${backup}"/>
        <tstamp>
            <format property="backup.time" pattern="d-MMMM-yyyy h-maa" locale="en"></format>
        </tstamp>
        <mkdir dir="${backup}/src_${backup.time}"/>
        <copy todir="${backup}/src_${backup.time}">
            <fileset dir="${src}"/>
        </copy>
    </target>

    <!--    Backup everything in the development directory. -->
    <target name="Backup Development" depends="init">
        <mkdir dir="${backup}"/>
        <tstamp>
            <format property="backup.time" pattern="d-MMMM-yyyy h-maa" locale="en"></format>
        </tstamp>
        <mkdir dir="${backup}/dev_${backup.time}"/>
        <copy todir="${backup}/dev_${backup.time}">
            <fileset dir="${development}"/>
        </copy>
    </target>

    <target name="Clean"
        description="clean up">
        <delete dir="${classes}"/>
        <delete dir="${jars}"/>
        <delete dir="${javadoc}"/>
        <delete dir="${lib}"/>
    </target>

    <target name="Compile" depends="init"
        description="compile the source ">
        <delete dir="${classes}"/>
        <mkdir dir="${classes}"/>
        <javac srcdir="${src}" destdir="${classes}">
            <src path="${project_home}/dischargelamps/src"/>
            <src path="${project_home}/dischargelamps/lasers/src"/>
            <src path="${project_home}/dischargelamps/lasers/phetgraphics-module/src"/>
            <src path="${project_home}/dischargelamps/lasers/phetgraphics-module/phetcommon-module/src"/>
            <src path="${project_home}/dischargelamps/lasers/mechanics-module/src"/>
            <src path="${project_home}/dischargelamps/lasers/collision-dir/src"/>
            <src path="${project_home}/dischargelamps/lasers/controls-dir/src"/>
            <src path="${project_home}/charts-dir/src"/>
        </javac>
    </target>

    <target name="Generate Jar" depends="Compile"
        description="generate the distribution">
        <!-- Create the distribution directory -->
        <delete dir="${jars}"/>
        <mkdir dir="${jars}"/>
        <buildnumber/>
        <echo message="${jars}/${distname}.jar"/>
        <jar destfile="${jars}/${distname}.jar">
            <fileset dir="${classes}"/>
            <fileset dir="${data}"/>
            <fileset dir="${project_home}/dischargelamps/data"/>
            <fileset dir="${project_home}/dischargelamps/lasers/data"/>
            <fileset dir="${project_home}/dischargelamps/lasers/phetgraphics-module/phetcommon-module/data"/>
            <fileset dir="${project_home}/dischargelamps/lasers/controls-dir/data"/>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="version" value="${version}"/>
                <attribute name="build" value="${build.number}"/>
                <attribute name="Main-Class" value="${main.class}"/>
            </manifest>
        </jar>
    </target>

    <target name="Javadoc">
        <delete dir="${javadoc}"/>
        <javadoc destdir="${javadoc}" author="true" version="true" use="true">
            <packageset dir="${src}" defaultexcludes="yes">
            </packageset>
            <bottom><![CDATA[<i>Copyright &#169; 2003 PhET, R&S Software. All Rights Reserved.</i>]]></bottom>
            <link href="http://java.sun.com/products/jdk/1.4/docs/api/"/>
        </javadoc>
    </target>

    <!-- Build an executable release for a client who will be using it for
        development -->
    <target name="Release With Lib" depends="Generate Jar,Javadoc"
        description="generate the release distribution, including binary, source and docs">
        <!-- Create the distribution directory -->
        <mkdir dir="${releases}"/>
        <mkdir dir="${releases}/${distname}${version}_build-${build.number}"/>
        <mkdir dir="${releases}/${distname}${version}_build-${build.number}/src"/>
        <mkdir dir="${releases}/${distname}${version}_build-${build.number}/bin"/>
        <mkdir dir="${releases}/${distname}${version}_build-${build.number}/javadoc"/>

        <copy todir="${releases}/${distname}${version}_build-${build.number}">
            <fileset dir="." casesensitive="yes">
                <include name="*.txt"/>
                <include name="*.xml"/>
                <include name="*.properties"/>
            </fileset>
        </copy>

        <copy todir="${releases}/${distname}${version}_build-${build.number}/bin">
            <fileset dir="${jars}"/>
        </copy>
        <copy todir="${releases}/${distname}${version}_build-${build.number}/javadoc">
            <fileset dir="${javadoc}"/>
        </copy>

        <copy todir="${releases}/${distname}${version}_build-${build.number}/src">
            <filterset>
                <filter token="ant_header" value="This file is part of ${projectname}.${line.separator}${line.separator}${projectname} is free software; you can redistribute it and/or modify${line.separator}it under the terms of the GNU General Public License as published by${line.separator}the Free Software Foundation; either version 2 of the License, or${line.separator}(at your option) any later version.${line.separator}${line.separator}${projectname} is distributed in the hope that it will be useful,${line.separator}but WITHOUT ANY WARRANTY; without even the implied warranty of${line.separator}MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the${line.separator}GNU General Public License for more details.${line.separator}${line.separator}You should have received a copy of the GNU General Public License${line.separator}along with Foobar; if not, write to the Free Software${line.separator}Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA${line.separator}${line.separator}Copyright ${user.name}, 2003"/>
            </filterset>
            <fileset dir="${src}"/>
        </copy>
        <copyclasspath directory="${releases}/${distname}${version}_build-${build.number}/lib" ignore="${ignorepath}"/>
    </target>

    <taskdef name="copyclasspath" classname="org.reids.anttasks.CopyClasspath"/>
    <target name="Copy Classpath To lib">
        <delete dir="${lib}"/>
        <copyclasspath directory="${lib}" ignore="${ignorepath}"/>
    </target>


    <target name="Output Classpath to File">
        <echo file="classpath.output.txt" message="${java.class.path}"></echo>
    </target>
</project>