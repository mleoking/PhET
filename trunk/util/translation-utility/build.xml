<!--
================================================================================ 

    Buildfile for PhET Translation Utility
    
    Properties that must be defined in build-local.properties:
	   
	   dev.username - username on development server
       dev.password - password on development server
       prod.username - username on production server
       prod.username - password on production server
       
================================================================================ 
-->
<project name="PhET Translation Utility" default="build-jar" basedir=".">

	<property file="build-local.properties"/>
		
	<!-- =================================================================== -->
	<!-- Private properties                                                  -->
	<!-- =================================================================== -->
		
	<!-- servers -->
	<property name="dev.server" value="spot.colorado.edu"/>
	<property name="prod.server" value="tigercat.colorado.edu"/>
	
	<!-- server paths -->
	<property name="dev.deploy.rootdir" value="/Net/www/webdata/htdocs/UCB/AcademicAffairs/ArtsSciences/physics/phet/dev"/>
    <property name="prod.deploy.dir" value="/web/htdocs/phet/phet-dist/translation-utility"/>
	
	<!-- local directories where we create things -->
	<property name="dir.output" location="${basedir}/build-output"/>
	<property name="dir.output.classes" location="${dir.output}/classes"/>
	<property name="dir.deploy" location="${basedir}/deploy"/>
	
	<!-- directories that contain dependent source, libs, etc. -->
	<property name="dir.contrib" location="${basedir}/../simulations-java/contrib"/>
	<property name="dir.phetcommon" location="${basedir}/../simulations-java/common/phetcommon"/>
	<property name="dir.proguard" location="${basedir}/../simulations-java/build-tools/proguard"/>

	<!-- files -->
	<property name="file.manifest" location="${dir.output.classes}/MANIFEST.MF"/>
	<property name="translation-utility.properties" location="data/translation-utility/translation-utility.properties"/>

	<!-- JAR files -->
	<property name="proguard.jar" location="${dir.proguard}/lib/proguard.jar"/>
	<property name="jmock.jar" location="${dir.contrib}/jmock/jmock.jar"/>
	<property name="jnlp.jar" location="${dir.contrib}/javaws/jnlp.jar"/>
	<property name="junit.jar" location="${dir.contrib}/junit/junit.jar"/>
	
	<!-- miscellaneous -->
	<property name="translation-utility.jar" value="translation-utility.jar"/>
	<property name="main.class" value="edu.colorado.phet.translationutility.TranslationUtility"/>
	
	
	<!-- =================================================================== -->
	<!-- Tasks                                                               -->
	<!-- =================================================================== -->
	
	<!-- tell Ant about ProGuard task -->
	<taskdef resource="proguard/ant/task.properties" classpath="${proguard.jar}" />
	
	
	<!-- =================================================================== -->
	<!-- Targets                                                             -->
	<!-- =================================================================== -->
		
	<!-- builds a deployable JAR file, shrunk using ProGuard -->
	<target name="build-jar" depends="clean">
		
		<!-- prepare the output directory -->
		<mkdir dir="${dir.output.classes}"/>
		
		<!-- compile Java source files -->
		<javac destdir="${dir.output.classes}" classpath="${jmock.jar};${jnlp.jar};${junit.jar}" source="1.4" target="1.4" debug="true" debuglevel="lines,source">
			<src path="${basedir}/src"/>
			<src path="${dir.phetcommon}/src"/>
		</javac>
		
		<!-- copy resources (localization files, images, etc) to output directory -->
		<copy todir="${dir.output.classes}">
			<fileset dir="${basedir}/data"/>
			<fileset dir="${dir.phetcommon}/data"/>
		</copy>
		
		<!-- create manifest -->
		<echo message="Manifest-Version: 1.0" file="${file.manifest}"/>
		<echo message="${line.separator}" append="true" file="${file.manifest}"/>
		<echo message="Main-Class: ${main.class}" append="true" file="${file.manifest}"/>
		<echo message="${line.separator}" append="true" file="${file.manifest}"/>
		
		<!-- build the JAR -->
		<jar destfile="${dir.output}/${translation-utility.jar}" basedir="${dir.output.classes}" manifest="${file.manifest}"/>
		
		<!-- ProGuard JRE runtime libs are platform specific -->
		<condition property="proguard.java.classpath" value="${java.home}/lib/rt.jar">
			<not><os family="mac"/></not>
		</condition>
		<condition property="proguard.java.classpath" value="${java.home}/../Classes/classes.jar${path.separator}${java.home}/../Classes/ui.jar">
			<os family="mac"/>
		</condition>
		
		<!-- shrink the JAR with ProGuard -->
		<proguard verbose="true" 
			      obfuscate="false" 
			      optimize="false" 
			      ignorewarnings="true" 
			      warn="false"
			      skipnonpubliclibraryclasses="false"
			      skipnonpubliclibraryclassmembers="false">
			<!-- inputs, outputs, libraries -->
			<injar file="${dir.output}/${translation-utility.jar}" />
			<injar file="${jnlp.jar}" />
			<outjar file="${dir.deploy}/${translation-utility.jar}" />
			<libraryjar path="${proguard.java.classpath}" />
		    <!-- preserve main class -->
		    <keepclasseswithmembers name="${main.class}">
		      <method access="public static" type="void" name="main" parameters="java.lang.String[]" />
		    </keepclasseswithmembers>
		</proguard>
		
	</target>
	
	<!-- cleans up anything that was created by build-jar -->
	<target name="clean">
		<delete dir="${dir.output}"/>
		<delete file="${dir.deploy}/${translation-utility.jar}"/>
	</target>
	
	<!-- deploys to the development server -->
	<target name="build-and-deploy-dev" depends="fail-unless-deploy-properties-are-set,build-jar">
		<loadproperties srcFile="${translation-utility.properties}"/>
	    <property name="dev.deploy.dir" value="${dev.deploy.rootdir}/translation-utility/${version.major}.${version.minor}.${version.dev}"/>
		<sshexec host="${dev.server}" username="${dev.username}" password="${dev.password}" trust="true" command="mkdir -p ${dev.deploy.dir}"/>
        <scp sftp="true" todir="${dev.username}:${dev.password}@${dev.server}:${dev.deploy.dir}" trust="true">
            <fileset dir="deploy"/>
        	<fileset file="${translation-utility.properties}"/>
        </scp>
		<echo message="Deployed to ${dev.server}:${dev.deploy.dir}"/>
	</target>
		
	<!-- deploys to both the production and development servers -->
    <target name="build-and-deploy-prod" depends="fail-unless-deploy-properties-are-set,build-and-deploy-dev">
    	<sshexec host="${prod.server}" username="${dev.username}" password="${dev.password}" trust="true" command="mkdir -p ${prod.deploy.dir}"/>
        <scp sftp="true" todir="${prod.username}:${prod.password}@${prod.server}:${prod.deploy.dir}" trust="true">
            <fileset dir="deploy"/>
        	<fileset file="${translation-utility.properties}"/>
        </scp>
    	<echo message="Deployed to ${prod.server}:${prod.deploy.dir}"/>
    </target>
	
	<!-- fails unless properties required for deployment are set -->
	<target name="fail-unless-deploy-properties-are-set">
		<fail unless="dev.username" message="property dev.username is not set"/>
	    <fail unless="dev.password" message="property dev.password is not set"/>
		<fail unless="prod.username" message="property prod.username is not set"/>
	    <fail unless="prod.password" message="property prod.password is not set"/>
	</target>

</project>