Notes on Persistence using XMLEncoder/Decoder
=============================================



Making a Simulation Persistent
==============================

Code to Invoke Save/Restore
---------------------------
Save/restore is invoked through the ModuleManager class through the following interfaces:

    public void saveState( String fileName );
    public void restoreState( String fileName );

Note that the current module is the only thing persisted. 

A simple use of this through the File menu is shown here:

        PhetApplication app = new TestSaveState( new AppModel() );
        JMenuItem mi2 = new JMenuItem( "Restore state" );
        mi2.addActionListener( new ActionListener() {
            public void actionPerformed( ActionEvent e ) {
                PhetApplication.instance().getModuleManager().restoreState( "/temp/ttt.xml" );
            }
        } );
        app.getPhetFrame().addFileMenuItem( mi2 );

        JMenuItem mi = new JMenuItem( "Save state" );
        mi.addActionListener( new ActionListener() {
            public void actionPerformed( ActionEvent e ) {
                PhetApplication.instance().getModuleManager().saveState( "/temp/ttt.xml" );
            }
        } );
        app.getPhetFrame().addFileMenuItem( mi );
        app.getPhetFrame().addFileMenuSeparatorAfter( mi2 );



Modules
-------
Each module that has state that must be preserved needs to have an associated subclass of ModuleStateDescriptor,
with Java Beans conformant code like this:

    //////////////////////////////////////////////////////////
    // Persistence
    //
    public ModuleStateDescriptor getStateDescriptor() {
        MyModuleStateDescriptor mySd = new MyModuleStateDescriptor( this );
        mySd.setLastX( lastX );
        return mySd;
    }

    public void restoreState( ModuleStateDescriptor sd ) {
        super.restoreState( sd );
        lastX = ( (MyModuleStateDescriptor)sd ).getLastX();
    }

    /**
     * This module's descriptor
     */
    public static class MyModuleStateDescriptor extends ModuleStateDescriptor {
        private int lastX;

        public MyModuleStateDescriptor() {
        }

        protected MyModuleStateDescriptor( Module_B module ) {
            super( module );
        }

        public int getLastX() {
            return lastX;
        }

        public void setLastX( int lastX ) {
            this.lastX = lastX;
        }
    }


Use of Persistent Wrappers for JDK Classes
------------------------------------------
There are a lot of classes in the JDK that are not Java Bean conformant, that we still want to persist. Use
persistent wrappers for these. They are in the edu.colorado.phet.common.util.persistence package.

For example, if you need a Point2D, instead of

    point = new Point2D.Double( 30, 40 ));

use
    point = new PersistentPoint2D( new Point2D.Double( 30, 40 ));


Event Handlers
--------------
For event handlers to be persistent, they must be defined by classes that are public and Java Bean conformant. That
means you can't use annonymouse inner classes. I also means that they must have no-argument contructors, and
might need setters/getters for state they maintain. Here's an example:

    /**
     * TranslationListener for moving the magnet around
     */
    public static class BarMagnetTranslator implements TranslationListener {
        HollywoodMagnet _magnetModel;

        public BarMagnetTranslator() {
        }

        public BarMagnetTranslator( HollywoodMagnet _magnetModel ) {
            this._magnetModel = _magnetModel;
        }


        public HollywoodMagnet get_magnetModel() {
            return _magnetModel;
        }

        public void set_magnetModel( HollywoodMagnet _magnetModel ) {
            this._magnetModel = _magnetModel;
        }

        /**
         * Event handling code
         */
        public void translationOccurred( TranslationEvent e ) {
            double x = _magnetModel.getX() + e.getDx();
            double y = _magnetModel.getY() + e.getDy();
            _magnetModel.setLocation( x, y );
        }
    }


Known Issues
==================
There are classes in the JDK that don't provide sufficient Java Beans compliance to be used as-is.
    Point2D
I've creeated a wrapper class, PersistentPoint2D that works.

ApparatusPanel doesn't save/restore properly right now, so I have to save/restore its GraphicLayerSet's
MultiMap, and setting the component for everything in the MultiMap upon restore.

Are all items in the GraphicLayerSet's MultiMap PhetGraphics that should point to the ApparatusPanel?

