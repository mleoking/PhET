// Copyright 2002-2013, University of Colorado
package edu.colorado.phet.buildtools.html5;

import java.awt.*;
import java.io.File;
import java.io.IOException;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Locale;

import edu.colorado.phet.common.phetcommon.util.FileUtils;
import edu.colorado.phet.common.phetcommon.util.LocaleUtils;
import edu.colorado.phet.common.phetcommon.util.PhetLocales;
import edu.colorado.phet.common.phetcommon.util.function.Function1;

import static edu.colorado.phet.common.phetcommon.util.FunctionalUtils.map;
import static edu.colorado.phet.common.phetcommon.util.FunctionalUtils.mkString;

/**
 * @author Jonathan Olson
 */
public class ExportPhetcommonLocales {
    /**
     * Should be run with a working directory of the standard PhET git directory (has all git repositories as sub-directories).
     *
     * @param args
     * @throws IOException
     */
    public static void main( String[] args ) throws IOException {

        File outputFile = new File( "chipper/js/data/localeInfo.js" );
        if ( !outputFile.exists() ) {
            throw new RuntimeException( "Destination locales.js does not exist, please run from the git directory" );
        }

        List<Locale> locales = PhetLocales.getInstance().getLocaleList();
        Collections.sort( locales, new Comparator<Locale>() {
            public int compare( Locale a, Locale b ) {
                return a.toString().compareTo( b.toString() );
            }
        } );

        String data = mkString( map( locales, new Function1<Locale, String>() {
            public String apply( Locale locale ) {
                String direction;
                if ( ComponentOrientation.getOrientation( locale ).isLeftToRight() ) {
                    direction = "ltr";
                }
                else {
                    direction = "rtl";
                }
                return "    " + LocaleUtils.localeToString( locale ) + ": {\n" +
                       "      name: '" + JavaScriptUtils.escapeSingleQuoteJS( PhetLocales.getInstance().getName( locale ) ) + "',\n" +
                       "      localizedName: '" + JavaScriptUtils.escapeSingleQuoteJS( locale.getDisplayName( locale ) ) + "',\n" +
                       "      direction: '" + direction + "'\n" +
                       "    }";
            }
        } ), ",\n" );

        String comments = "// Copyright 2002-2015, University of Colorado Boulder\n" +
                          "\n" +
                          "// Locale information for all locales that we support\n" +
                          "//\n" +
                          "// **************************************************************************************\n" +
                          "// AUTO-GENERATED BY ExportPhetcommonLocales.java, FOR NOW PLEASE DO NOT MODIFY DIRECTLY!\n" +
                          "// **************************************************************************************\n" +
                          "//\n" +
                          "// language codes are ISO 639-1, see http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\n" +
                          "// country codes are ISO 3166-1 alpha2, see http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\n" +
                          "// \n" +
                          "// NOTE: We are using an older version of ISO 639-1 because java.util.Locale maps some of the newer language codes to older codes.\n" +
                          "// See Locale.convertOldISOCodes.\n" +
                          "// The affected country codes are:\n" +
                          "// he -> iw (Hebrew)\n" +
                          "// yi -> ji (Yiddish)\n" +
                          "// id -> in (Indonesian)\n";

        String output = comments +
                        "\n" +
                        "(function( global ) {\n" +
                        "  'use strict';\n" +
                        "\n" +
                        "  var locales = {\n" +
                        data + "\n" +
                        "  };\n" +
                        "\n" +
                        "  // browser require.js-compatible definition\n" +
                        "  global.define && global.define( function() {\n" +
                        "    return locales;\n" +
                        "  } );\n" +
                        "\n" +
                        "  // Node.js-compatible definition\n" +
                        "  if ( typeof module !== 'undefined' ) {\n" +
                        "    module.exports = locales;\n" +
                        "  }\n" +
                        "})( this );\n";

        FileUtils.writeString( outputFile, output );
    }
}