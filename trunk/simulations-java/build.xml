<!--

This build file is specific to building phet simulation files, in particular building jars and jnlp files.
PhET-team specific tasks are located in an auxiliary build file.  
-->

<project name="PhET Master Build Script" default="gui" basedir=".">


    <!-- Deployment properties -->
    <property name="dev.server.name" value="spot.colorado.edu"/>
    <property name="prod.server.name" value="tigercat.colorado.edu"/>

    <!--Properties for deploy output-->
    <property name="dev.server.path" value="/Net/www/webdata/htdocs/UCB/AcademicAffairs/ArtsSciences/physics/phet/dev"/>
    <property name="dev.server.url" value="http://www.colorado.edu/physics/phet/dev"/>
    <property name="prod.server.path" value="/web/htdocs/phet/simulations/"/>
    <property name="prod.server.url" value="http://phet.colorado.edu/simulations/"/>

    <!--Do not modify: these properties define the codebase for java-implementation of ant tasks.-->
    <property name="ant-output" location="ant_output"/>
    <property name="phetbuild-classes" location="${ant-output}/phetbuild/classes"/>
    <property name="proguard.jar" location="build-tools/proguard3.8/lib/proguard.jar"/>
    <property name="phetbuild-src" location="build-tools/phet-build/src"/>

    <property name="phet.version" value="0.0.1"/>

    <!--Phet task implementations-->
    <property name="phetbuild-classname" value="edu.colorado.phet.build.PhetBuildTask"/>
    <property name="phetdisplaystats-classname" value="edu.colorado.phet.build.PhetDisplayStatsTask"/>
    <property name="phetclean-classname" value="edu.colorado.phet.build.PhetCleanTask"/>
    <property name="phetjnlp-classname" value="edu.colorado.phet.build.PhetBuildJnlpTask"/>
    <property name="phet-list-sims-classname" value="edu.colorado.phet.build.PhetListSimTask"/>
    <property name="phet-list-flavors-classname" value="edu.colorado.phet.build.PhetListFlavorsTask"/>
    <property name="phet-list-locales-classname" value="edu.colorado.phet.build.PhetListLocalesTask"/>
    <property name="phet-build-gui-classname" value="edu.colorado.phet.build.PhetBuildGUI"/>

    <!--Properties for the structure of the phet codebase.-->
    <property name="build-tools" value="build-tools"/>
    <property name="simulations-directory" value="${basedir}/simulations"/>

    <property name="phetbuild-dependencies" value="${phetbuild-classes};${proguard.jar}"/>

    <property name="dir.build-tools" value="${basedir}/build-tools/"/>
    <!-- Support jars -->
    <property name="jar.ant-contrib" value="${dir.build-tools}ant-contrib/ant-contrib-1.0b3.jar"/>
    <property name="jar.junit" value="${dir.build-tools}junit3.8.2/junit.jar"/>
    <property name="jar.antform" value="${dir.build-tools}antform-bin-2.0beta2/lib/antform.jar"/>

    <!--
    The local.properties file encodes platform-specific and user-specific defaults for deployment and testing.
      The supported options are:
    username
    password
    ssh-host
    browser
    -->
    <property file="local.properties"/>

    <!-- Ant-Contrib tasks definition -->
    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="${jar.ant-contrib}"/>
        </classpath>
    </taskdef>

    <!-- AntForm task definition -->
    <taskdef name="antform" classname="com.sardak.antform.AntForm" classpath="${jar.antform}"/>

    <taskdef name="maverick-ssh" classname="com.sshtools.ant.Ssh"
             classpath="${build-tools}/maverick/lib/maverick-ant.jar"/>

    <target name="_clean-phet-build">
        <delete dir="${phetbuild-classes}"/>
    </target>

    <target name="_compile-phet-build">
        <mkdir dir="${phetbuild-classes}"/>
        <javac srcdir="${phetbuild-src}" destdir="${phetbuild-classes}" classpath="${proguard.jar}" debug="true"
               debuglevel="lines,source"/>
    </target>

    <!--This task was rewritten to avoid recompilation of the phet-java ant task implementations.-->
    <target name="_build-phet-build">
        <if>
            <not>
                <isset property="init.complete"/>
            </not>
            <then>
                <antcall target="_clean-phet-build"/>
                <antcall target="_compile-phet-build"/>
                <var name="init.complete" value="true"/>
            </then>
        </if>
    </target>

    <target name="_declare-phet-build-tasks" depends="_build-phet-build, _build-phet-build">
        <taskdef name="phet-build"
                 classname="${phetbuild-classname}"
                 classpath="${phetbuild-dependencies}"/>

        <taskdef name="phet-clean"
                 classname="${phetclean-classname}"
                 classpath="${phetbuild-dependencies}"/>

        <taskdef name="phet-jnlp"
                 classname="${phetjnlp-classname}"
                 classpath="${phetbuild-dependencies}"/>

        <taskdef name="phet-display-stats"
                 classname="${phetdisplaystats-classname}"
                 classpath="${phetbuild-dependencies}"/>

        <taskdef name="phet-list-sims"
                 classname="${phet-list-sims-classname}"
                 classpath="${phetbuild-dependencies}"/>

        <taskdef name="phet-list-flavors"
                 classname="${phet-list-flavors-classname}"
                 classpath="${phetbuild-dependencies}"/>

        <taskdef name="phet-list-locales"
                 classname="${phet-list-locales-classname}"
                 classpath="${phetbuild-dependencies}"/>

        <taskdef name="phet-build-gui"
                 classname="${phet-build-gui-classname}"
                 classpath="${phetbuild-dependencies}"/>
    </target>

    <target name="_init" depends="_declare-phet-build-tasks"/>

    <target name="gui" depends="_init">
        <phet-build-gui/>
    </target>

    <!--This internal task puts a comma delimited list of all phet simulations into property phet.simlist-->
    <target name="_list-sims">
        <phet-list-sims property="phet.simlist"/>
    </target>

    <target name="list-locales" depends="_init">
        <phet-list-locales property="locale-list" project="balloons"/>
        <echo message="locales: ${locale-list}"/>
    </target>

    <target name="build-all-jars" depends="_init, _list-sims">
        <foreach list="${phet.simlist}" target="build-jar" param="sim.name"/>
    </target>

    <target name="build-all-jnlp" depends="_init, _list-sims">
        <foreach list="${phet.simlist}" target="build-jnlp" param="sim.name"/>
    </target>

    <!--Cleans a single simulation's jar and jnlp files in the deploy directory-->
    <target name="clean-sim" depends="_init, _verify-sim-name-specified">
        <!--Delete the simulation jar file.-->
        <delete file="${simulations-directory}/${sim.name}/deploy/${sim.name}.jar"/>

        <!--Delete all jnlp files (one per flavor)
        TODO: this only cleans existing flavors, if a flavor has been renamed, the old jnlp files will have to be deleted manually-->
        <phet-list-flavors property="sim.flavors" project="${sim.name}"/>
        <foreach list="${sim.flavors}" target="clean-sim-jnlp" param="sim.flavor"/>
    </target>

    <target name="clean-sim-jnlp">
        <property name="sim.flavor.jnlp" value="${simulations-directory}/${sim.name}/deploy/${sim.flavor}.jnlp"/>
        <echo message="Cleaning jnlp file ${sim.flavor.jnlp}"/>
        <delete file="${sim.flavor.jnlp}"/>
    </target>

    <!--Cleans deploy directories of jar and jnlp files-->
    <target name="clean-all" depends="_init,_list-sims">
        <foreach list="${phet.simlist}" target="clean-sim" param="sim.name"/>
        <!--<delete dir="${ant-output}" excludes="${phetbuild-classes}"/>-->
    </target>

    <!--Builds jars and jnlp files for all phet simulations-->
    <target name="build-all" depends="_init,clean-all,_list-sims,build-all-jars,build-all-jnlp"/>

    <!--Builds the jar file for the simulation specified as property "sim.name"-->
    <target name="build-jar" depends="_init,_verify-sim-name-specified">
        <phet-build project="${sim.name}" destfile="deploy/${sim.name}.jar"/>
    </target>

    <!--Builds the jnlp file for a specific locale and flavor-->
    <target name="_build-jnlp-locale-flavor">
        <phet-jnlp project="${sim.name}" flavor="${sim.flavor}" locale="${sim.locale}"
                   deployurl="${sim.server.url}/${sim.name}/${sim.version}"/>
    </target>

    <!--Builds jnlp files for all locales for a specific flavor, as well as the locale-less version.-->
    <target name="_build-jnlp">
        <phet-list-locales property="sim.locales" project="${sim.name}"/>
        <foreach list="${sim.locales}" target="_build-jnlp-locale-flavor" param="sim.locale" inheritall="true" inheritrefs="true"/>

        <!--And build a locale-less version-->
        <phet-jnlp project="${sim.name}" flavor="${sim.flavor}" deployurl="${sim.server.url}/${sim.name}/${sim.version}"/>
    </target>

    <!--
    To use this task, call ant like this:
    ant build-jnlp -Dsim.name=cck -Dsim.flavor=cck-dc -Dsim.version=1.2.3.445

    sim.flavor defaults to sim.name
    sim.version defaults to the value in [project].properties (see below)
    sim.url defaults to the location on PhET's dev/ site

        The JNLP task requires these files and properties:
    [project]/data/[project]/localization/[project]-strings.properties
    has properties
    [project].name
    [project].description

    [project]/data/[project]/[project].properties
    has properties
    version.major
    version.minor
    version.dev
    version.revision

    about.credits (optional)
    -->
    <target name="build-jnlp" depends="_init,_verify-sim-name-specified">
        <var name="file.project.properties"
             value="${simulations-directory}/${sim.name}/data/${sim.name}/${sim.name}.properties"/>
        <if>
            <not>
                <isset property="sim.version"/>
            </not>
            <then>
                <loadproperties srcFile="${file.project.properties}"/>
                <property name="sim.version" value="${version.major}.${version.minor}.${version.dev}"/>
            </then>
        </if>
        <if>
            <not>
                <isset property="sim.flavors"/>
            </not>
            <then>
                <phet-list-flavors property="sim.flavors" project="${sim.name}"/>
            </then>
        </if>
        <if>
            <not>
                <isset property="sim.server.url"/>
            </not>
            <then>
                <property name="sim.server.url" value="${dev.server.url}"/>
            </then>
        </if>

        <var name="deployurl" value="${sim.server.url}/${sim.name}/${sim.version}"/>

        <foreach list="${sim.flavors}" target="_build-jnlp" param="sim.flavor" inheritall="true" inheritrefs="true"/>
    </target>

    <!-- To Do: make local files (local.properties, open_cmd.bat, etc) start with '.' for filtering in this task.-->
    <target name="build-source-distribution" depends="_init,clean-all" >
        <zip destfile="${basedir}/deploy/phet-src-${phet.version}.zip" basedir="${basedir}"
                excludes="local.properties, open_cmd.bat, build-old.xml, **/deploy/*.jar, **/deploy/*.jnlp, ant_output/, **/classes/, deploy/,
                **/ant-contrib/docs/, **/antform-bin-2.0beta2/doc/, **/apache-ant-1.7.0/docs/, **/junit3.8.2/doc/, **/junit3.8.2/javadoc/,
                **/proguard3.8/docs, **/retroweaver-2.0/, **/retroweaver-test/, **/JSci/documentation/, **/JSci/examples/,
                **/liquidlnf-2.9.1-src/, **/oyoaha/"></zip>
    </target>

    <target name="_build-translatable-sim" depends="_init,_verify-sim-name-specified">
        <phet-build project="${sim.name}"/>
        <property name="sim.translation.dir" value="${ant-output}/translation/sims/${sim.name}"/>
        <property name="sim.localization.dir" value="${sim.translation.dir}/${sim.name}/localization"/>
        <mkdir dir="${sim.localization.dir}"/>
        <copy file="${basedir}/simulations/${sim.name}/deploy/${sim.name}.jar" todir="${sim.translation.dir}"/>
        <copy todir="${sim.localization.dir}">
            <fileset dir="${basedir}/simulations/${sim.name}/data/${sim.name}/localization"/>
        </copy>
    </target>

    <target name="_build-translatable-distribution" depends="_init,clean-all,_list-sims">
        <delete dir="${ant-output}/translation"/>
        <copy file="${basedir}/docs/translation-readme.txt" tofile="${ant-output}/translation/readme.txt"/>
        <copy file="${basedir}/phet-license.txt" todir="${ant-output}/translation/"/>
        <copy file="${basedir}/LICENSE.txt" todir="${ant-output}/translation/"/>
        <foreach list="${phet.simlist}" target="_build-translatable-sim" param="sim.name"/>
    </target>

    <!--These tasks are still under consideration, and may be changed, moved or deleted.-->
    <target name="display-stats" depends="_init">
        <phet-display-stats/>
    </target>

    <target name="_read-username-and-password">
        <if>
            <not>
                <and>
                    <isset property="deploy.username"/>
                    <isset property="deploy.password"/>
                </and>
            </not>
            <then>
                <echo message="Gathering username and password from user"/>

                <!-- If the username and password are not set, get them now: -->
                <antform title="Deployment Host Login" width="550" height="300" focus="login">
                    <label>Please enter your username and password that you use to login to the deployment host machine
                        ${ssh-host}.
                    </label>

                    <textProperty label="Username:" property="deploy.username" required="true"/>
                    <textProperty label="Password:" property="deploy.password" required="true" password="true"/>
                </antform>
            </then>
        </if>
    </target>


    <target name="_verify-sim-name-specified" description="Verifies that the simulation name has been specified">
        <if>
            <not>
                <isset property="sim.name"/>
            </not>
            <then>
                <antform title="Enter Simulation Name" focus="OK" width="750" height="300">
                    <label>Please enter the name of the simulation with which to perform the operation. This is the name
                        of the Subversion folder that the simulation is stored in.
                    </label>
                    <textProperty label="Simulation Name: " property="sim.name" required="true"
                                  tooltip="The simulation name"/>
                </antform>
            </then>
        </if>
    </target>


    <!--This task builds a simulation's jar file and jnlp file and posts it to PhET's dev/ site-->
    <target name="_build-and-deploy"
            depends="_init, _read-username-and-password,build-jar, build-jnlp">
        <property name="sim.deploy.dir" value="${sim.server.path}/${sim.name}"/>
        <property name="sim.deploy.dir.version"
                  value="${sim.deploy.dir}/${sim.version}"/>
        <maverick-ssh host="${ssh-host}" username="${deploy.username}"
                      password="${deploy.password}" version="2">
            <sftp action="mkdir" remotedir="${sim.deploy.dir}"/>
            <sftp action="mkdir" remotedir="${sim.deploy.dir.version}"/>
            <sftp action="put" remotedir="${sim.deploy.dir.version}"
                  verbose="true">
                <fileset dir="simulations/${sim.name}/deploy"></fileset>
            </sftp>
        </maverick-ssh>
        <if>
            <isset property="browser"/>
            <then>
                <echo message="Opening browser: ${browser} ${deployurl}"/>
                <exec executable="${browser}" spawn="true">
                    <arg value="${deployurl}"/>
                </exec>
            </then>
        </if>

    </target>

    <target name="build-and-deploy-dev">
        <antcall target="_build-and-deploy">
            <param name="sim.server.url" value="${dev.server.url}"/>
            <param name="sim.server.path" value="${dev.server.path}"/>
            <param name="ssh-host" value="${dev.server.name}"/>
        </antcall>
    </target>

    <target name="build-and-deploy-prod">
        <antcall target="_build-and-deploy">
            <param name="sim.server.url" value="${prod.server.url}"/>
            <param name="sim.server.path" value="${prod.server.path}"/>
            <param name="ssh-host" value="${prod.server.name}"/>
        </antcall>
    </target>

</project>