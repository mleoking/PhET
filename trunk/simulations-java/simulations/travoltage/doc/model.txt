Model for John Travoltage
Sam Reid 4-13-2013

The shape of John Travoltage is modeled as an irregular polygon, with these vertices:

163,200
165,224
186,252
187,269
208,335
223,351
242,350
262,338
276,345
218,402
192,377
181,371
147,293
129,273
86,366
95,381
123,390
128,401
91,404
46,402
44,360
83,274
46,234
4,218
4,198
24,140
77,65
111,48
133,48
137,40
145,40
164,10
186,7
212,19
211,28
206,32
200,50
202,61
191,77
173,74
167,79
174,94
181,107
183,123
190,136
207,145
286,120
298,135
296,144
275,150
270,169
200,183
172,172
162,200

The force on each particle is a sum of forces applied by each other particle.  Here is the algorithm to obtain the force on a particle due to another particle, with the scale factor k=5.
See MoveElectronsJade.getForce

    distanceVector = particle - particle2
    if (distanceVector.magnitude <=1) return ZERO VECTOR;
    v = a vector pointing in the opposite direction as distanceVector, with magnitude -k/Math.pow(distanceVector.magnitude,1.5)
    if (v.magnitude > 0.05) rescale v so that it has the max magnitude
    return v;
    
This rule causes the electrons to repel each other and to spread out across the body.

A dynamics engine (in this case JADE) is used to update the position of the particles given their accelerations, taking into account collisions with the hard surface polygon.
Other dynamics engines such as Box2D should work equally well here.

To account for the moving arm and leg, the same polygon is used for the entire body, but LimbLocationMap.getLocation shows how to map the location of the particles
when the arm and leg are at an angle.  This can lead to a slight discontinuity in the position of the particles as they move from leg to body and body to arm.
To summarize the method LimbLocationMap.getLocation, if a particle is found in a leg or arm, then its position is mapped by a rotation so that it will be drawn appropriately relative to the arm or leg.

A spark will be created under these conditions (see SparkManager.java).  A thresholding rule is like so:
    int[] numElectrons = new int[]{10, 15, 20, 35, 30, 35, 40, 50, 60, 70};
    double[] dist = new double[]{20, 30, 40, 40, 60, 70, 80, 100, 120, 140};
    
    double distToKnob = getFingerKnobDistance();
    int n = totalNumberOfElectronsInBody / 2.0;
    
    //Check each entry in the numElectrons array to see if there are enough electrons to fire at that distance.
    for( int i = 0; i < numElectrons.length; i++ ) {
        if( n > numElectrons[i] && distToKnob < dist[i] ) {
            return true;
        }
    }
    otherwise return false;

For how the electrons should move to the finger, see MoveToFinger.java.  There are a set of lines that flow from the feet and back toward the finger, which are given by these (x1,y1,x2,y2) line segments:
265,348,220,377
220,377,151,244
151,244,118,142
118,142,207,161
207,161,291,133
200,24,120,88
190,66,144,65
82,67,132,131
40,135,130,138
15,209,134,150
66,236,131,153
116,396,58,386
57,387,103,281
103,281,115,151
180,109,153,151
182,130,174,156
160,155,231,155
231,155,295,133
This roughly defines a wire frame that will direct electrons toward the pointing finger.
For the electrons to move, first they determine which line segment they are closest to based on the first (x1,y1) point, then they move toward its (x2,y2) point.
They are attracted to the (x2,y2) point with a 1/r coulomb law with a scale of k=30.0 and a max of 10.0.

To pick up electrons, see PickUpElectrons.java.  For each drag event, if the leg's angle is currently on the carpet AND the previous angle was also on the carpet, then one electron is added.
The range of angles that defines the carpet is v < 0.8 && v > 0.1 radians.