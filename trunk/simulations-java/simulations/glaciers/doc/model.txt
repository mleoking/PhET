****************************************************************

This document outlines the mathematical model behind the glacier
sim.  The calculations described are for a "Hollywood" model,
which was derived from the results of a finite-element glacier
model.  For that reason, the physical reasoning behind these
calculations is not apparent.

author: Archie Paulson
last modified: July 16, 2008

****************************************************************
* contents

-  variables and constants used
A. mountain valley geometry
B. climate model
C. steady state glacier model
D. ice velocities
E. time-evolution of glacier

****************************************************************

* variable names
    - x, horizontal distance, x=0 at glacier head (meters, m)
    - z, elevation (meters, m)
    - F, elevation of the valley floor  (meters, m)
    - H, thickness of the glacier (meters, m)
    - ela, equilibrium line altitude, ie, elevation where
      mass_balance=0 (m)
    - qela, quasi-ela, like the ela except that it describes the
      glacier, not the climate.  It is used for the
      time-dependence of the glacier. It should never be greater
      than max_F
    - elax, the x-position of the intersection of the glacier
      surface and the quasi-ela
    - temp, temperature at sea level (degrees Celcius, C)
    - snow, average snowfall across whole valley (m/yr)
    - abl, ablation as a function of elevation (m/yr)
    - acc, accumulation as a function of elevation (m/yr)
    - mass_balance, acc-abl (m/yr)
    - xterm, x-position of glacier terminus, or length of glacier
      (m)
    - H_max, the maximum thickness of the glacier (m)
    - timescale, the exponential relaxation time for an evolving
      glacier (years)
    - dt, the time interval between calculations for
      time-dependence (years)
    - q_advance_limit, a limit on the advance speed of the qela
      (will be negative) (m/yr)
    - ela_tolerance, a minimum advance speed that indicates no
      further time evolution is necessary

* constant names
    - max_F                     max(F), or F(x=0)
    - temp_lapse_rate           6.5e-3 C/m
    - melt_v_elev               30 
    - melt_z0                   1100        
    - melt_z1                   4300        
    - melt_v_temp               80          
    - modern_temp               21          
    - snow_max                  2.0
    - snow_min_elev             1800        
    - snow_max_elev             4600        
    - snow_transition_width     300
    - elax_b0                   157076      
    - elax_m0                   -37.57      
    - elax_m2                   -3.12489    
    - elax_b2                   14118       
    - elax_x1                   3800        
    - elax_x2                   4150        
    - elax_y1                   14300       
    - elax_c3                   -0.098411   
    - elax_c4                   0.000281185 
    - elax_terminus             0.6
    - hmax_scale                2.3

****************************************************************
A. mountain valley geometry

   The glacier behavior was modelled for a mountain valley with a
   particular geometry. Do not expect the models below to work
   with a very different mountain.  This geometry is unchanged
   from previous versions.

****************************************************************
B. climate model

   The model's climate can be uniquely described with one value:
   the ela, which is a function of two variables (temp and snow)
   that are set by the user. The temp determines ablation, and
   snow determines accumulation; their difference is the mass
   balance. The elevation of zero mass balance is the ela.

1. temp is controlled by the sim user, and can be any value
   between 13 and 20

2. snow is controlled by the sim user, and can be any value
   between 0 and 1.5

3. given temp, the temperature versus elevation is given by

    temp - temp_lapse_rate*z

4. given temp and z, ablation is calculated by    

    temp_diff=(temp-modern_temp)
    offset = 5.5e-5*((temp_diff+9)**5) + 0.01*(temp_diff-9) + 0.3
    min_ablation_elev= temp_diff*melt_v_temp + melt_z1
    if ( z > min_ablation_elev ):
        abl = offset
    else:
        abl = offset + (melt_v_elev  * (1.-sin((z-melt_z0- 
              temp_diff*melt_v_temp) / ((melt_z1-melt_z0)*2/pi)) ))

5. given snow and z, accumulation is calculated by

    s = snow/1.5                                  
    p0 = snow_max_elev - ((snow_max_elev-snow_min_elev)*s)
    pmax = snow_max*s
    tmp_ac = .5+(1./pi)* arctan((z-p0)/snow_transition_width)
    acc = pmax*tmp_ac

6. given abl and acc at any location, mass_balance is

    mass_balance = acc - abl

7. Given mass_balance at all elevations, ela is given by the
   elevation at which mass_balance=0 (or acc=abl).  The ela
   should be limited at some elevation above max_F (say, 8km).

8. initial climate should be
    temp = 19.0
    snow = 0.95

****************************************************************
C. steady state glacier model

   The glacier shape is described by its thickness as a function
   of x-position, H(x).  The glacier shape can be uniquely
   determined by a single value called the quasi-ela, qela.  The
   glacier is in steady state when the qela=ela.  This section
   describes how to compute H(x) for a given qela.
   
1. given qela, compute elax by

    if qela < elax_x1:
        elax = qela*elax_m0 + elax_b0
    elif qela < elax_x2:
        x = qela-elax_x1
        elax = elax_y1 + elax_m0*x + elax_c3*(x**2) + elax_c4*(x**3)
    else:
        elax = qela*elax_m2 + elax_b2

    minimum elax is 0.0
   
2. given elax, compute xterm (length of glacier) by

    xterm =  elax / elax_terminus

3. given elax, compute H_max (max thickness of glacier) by

    H_max = hmax_scale * sqrt(elax)
   
4. given qela, xterm, and H_max, the thickness at any x (written
   here as H(x)) is gvien by

    x_peak = 0.5 * xterm
    if x < x_peak: 
        p = max(42-0.01*qela,1.5)
        r = 1.5*x_peak
        H(x) = sqrt(r**2 - (x-x_peak)**2) * H_max/r
        H(x) = H(x) * ( x_peak**p - (abs(x-x_peak)**p))/ (x_peak**p)
    else if x < xterm:
        H(x) = sqrt(x_peak**2 - (x-x_peak)**2) * H_max/x_peak
    else:
        H(x) = 0.0
 

****************************************************************
D. ice velocities

    For a given glacier thickness, H, the velocity of the ice
    at that position can be determined.  This calculation is
    unchanged from previous versions.


****************************************************************
E. time-evolution of glacier

    If the ela is changed and does not coincide with the qela,
    the qela will evolve toward the ela, as given here.  There
    are some differences when the glacier is advancing (ela<qela)
    and when its retreating (ela>qela).

1. Set the timescale for evolution according to the ela:

    timescale =  -0.22*ela + 1026               # changed
    minimum timescale is 50
    maximum timescale is 200                    # changed

2. Every timestep, if qela is not the same as ela (ie, the
   glacier is out of equilibrium) change the qela by dqela.
   (note the special treatment for an advancing glacier):

    if ( (abs(qela-ela) > ela_tolerance) and (qela<=max_F) ):
        dqela = (ela-qela)*( 1. - exp(-dt/timescale) )
        if (ela<qela):
            q_advance_limit = (-0.06*qela + 300) * elax_terminus / elax_m0
            dqela = max( dqela, dt*q_advance_limit )
        qela = qela + dqela
    if ( qela > max_F):
        qela = max_F

3. The qela should no longer change when qela>max_F (this
   indicates that the glacier is completely gone),  as shown in
   the 'if' statment in part 2.

****************************************************************
