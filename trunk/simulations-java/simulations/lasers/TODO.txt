- When the app is paused, the dots on the energy levels window doesn't always agree with the laser itself

- State should know if a photon should be emitted when it is left. Currently, the Atom class makes this decision
when theStateLifetimeManager is created.
- SpontaneouslyEmittingState should be refactored to be a StateLifetimeManager
- Reintegrate the mirros into the cavity, rather than having them be separate objects at the module level.
- Photon doesn't use the free pool. Get rid of it.


- EnergyLevelMonitorPanel is an observer of the model. This causes lots of repaints. Instead, it should just be
a AtomicState.PopulationChangeListener, or the EnergyLevelGraphics should be, and the squiggles listen to the beams
- unify use of ModelViewTx1D in EnergyLevelGraphic and EnergyLevelMonitorPanel. The latter should set the transform
and send it to the former.

- AtomGraphic should just be a electronAbsorptionListenerAbsorptionListener, not a SimpleObserver
- Put off..max labels on intensity slider
- color control under the lamp, intensity on top


- AtomicState lifetime manager should be part of the base AtomicState now. There is no need of a separate
SpontaneouslyEmittingState.
- Enable photons emitted on high-to-mid state transitions
- add CollimatedBeamGraphic, or CollimatedBeamView class
- Change interpolation method that creates middle and high energy atom graphics.
- spontaneousEmmisionHalfLife and SpontaneousEmissionTime methods are confusing
- Line 34 in GroundState has a call that has terrible style
- Change location constants in BaseLaserModule to key off location of laser instead of s_origin

- Debug library, with ClockControlPanel
Should we keep or toss TxTranslatable, TxGraphic, TxBoundary, if we keep, can we conglomerate?

Refactor ModelViewTx2D and AffineTxUtil

1. choose 2nd panel then choose 1st panel, then energy level diagram slider erroneously moves up
	>>Could not reproduce this bug in 4.04.04-4.04.06 in either Java 1.4 or Java 1.6

2. First try to improve performance in 2nd panel, e.g. in case of no photons.  <1hr for analysis
    >>Nearly all unnecessary computation time is taken up in phetgraphics execution.
    >>No easy fix for this.  Best long term fix is piccolo.

3. Photons are going behind lamp control, can they go in front?
    >>Very difficult given the current implementation

5. Illegal argument exception on creating transparent photons
    >>Couldn't reproduce this

1.  After the laser blows up, the sim is still using most of his processor.  If he hits pause, it goes down to 15% or so.
Then if he hits play it's back up to 80-100%. So the sim is still running after the laser blows up.

2.  This one is related to Sam's bug that she found and a problem associated with the fact that we don't address the concept that the
chamber has to be an integral number of wavelengths to work.  So he will get a laser of one color (in photon view)
and then move the lower energy level.  It quickly builds up photons of the new color and is lasing in the new color
while there are still a large number of photons of the old color still oscillating and lasing.  See attached screen shot.
We might want to do something simple like reset when a person moves the lower energy level while lasing.


8-24-2007 bug report from McKagan
Also, I found a bug in Lasers.  It's there in the old version, and no one's ever complained about it before,
so it's probably not a high priority to fix, but it's worth at least documenting it.  Here's how you reproduce it:
1. Get it lasing.
2. Set lower transition from photon view to wave view.  There should be
  a big wave going.
3. Move energy level 1 up or down so that it's now lasing in a different color.
The wave will immediately change color even though most of the photons in the laser are
still the old color (this is a little weird, but I don't know how else it could behave, so it's probably fine).
4. Wait a few seconds and then switch back to photon view.  All the photons in the laser
cavity are gone!  Where did they go?  The wave view
  and the laser power meter still indicate that they're in there, but you can't see them.


=========================================================
12/16/04
- Made mirrors on cavity reflect in both directions
- Reduced max pumping rate on single atom panel by 1/8
- Added controls for the cheat angle and cavity height
- Changed labels on radio buttons to "Upper Transition" and "Lower Transition"

12/15/04
- Removed "(ev)" from y axis label in energy levels window
- When MultipleAtomModule is activated, the number of levels needs to be set to three.


11/16/04
- Removed restriction of method ending in "Occurred" from EventRegistry

---------------------------------------------------------
11/16/04
- position beam graphics from the beam origin
- Changed AtomGraphic to be an EventListener from a SimpleObserver
- Beam control panels change if the rate of the beam changes
- Lenses of lamps are the same as the photons they produce
- Make colors of energy levels map to real values
- Prevent energy levels from being dragged past each other
- photon energy must match the energy state energy to push an atom to a particular energy state
- Put wavelength control on the flashlight
- Energy states are represented by colored rings around atoms of a color associated with the energy level, and a
thickness proportional to the energy above the ground state.
- Make colors of energy levels map to real values
- Made cavity smaller
----------------------------------------------------------
11/9
- Prevent energy levels from being dragged past each other
- Put uncertainty back into state lifetimes
- Increase magnification of middle and high energy states
- Make energy levels mouse-able
    - Make AtomicState classes singletons
- Make state lifetimes dependent on energy level
- Change internal rep of CollimatedBeam to get rid of x,y,width,height and just use the Rectangle2D

