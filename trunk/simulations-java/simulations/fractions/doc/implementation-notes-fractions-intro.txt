The Fractions sim uses functional programming in many parts (more than typically done in PhET Sims).  There is an accompanying document "phet-functional-programming.pdf"
which discusses some of the issues.

To support the functional paradigm, this sim used FunctionalJava, http://functionaljava.org/ and Lombok http://projectlombok.org/
For a nice book on functional programming in Java, please see http://www.amazon.com/Functional-Programming-Java-Developers-Concurrency/dp/1449311032

In order to maintain a reasonable matching with piccolo, many model elements are converted into Property<T> instances which are used to sync with the model.
Where performance allows, large piccolo subtrees are reconstructed (not mutated) whenever the corresponding part of the model changes.

The immutable model objects are updated using copy methods.  The convention that I used for this sim is to give the copy method a name like "withValue",
and to only provide one argument to each copy method.  Convention for copy methods is to use method of the name of the variable and to call the constructor with the
arguments of the same names as the parameters to make it easy to see that everything is correct.
These should be written right after the constructors (or field declarations) if no constructors, and use single-line method
"simple methods in one line" in IntelliJ code style.  For example,
if the main constructor was State(name,x,y), then the copy method for x would be:

public State withX(double x){ return new State(name,x,y);}

To change multiple values, multiple copy calls would be made, such as:
State newState = state.withName("new name").withX(123);

Closures:
This sim was designed with many closures, and is intended to be read in an IDE with "closure-folding" feature enabled.
Also, closure variables are abbreviated to improve readability, for example, using:
F(SliceNodeArgs s) {return new ShapeNode(s.slice);}
instead of the more verbose:
F(SliceNodeArgs sliceNodeArgs) {return new ShapeNode(sliceNodeArgs.slice);}

This sim uses single-line methods elsewhere ("simple methods in one line" in IntelliJ) to improve readability for short methods.

The animation is implemented in the model instead of piccolo because it is (a) conceptually natural (that the location of objects is in the model and not just how they look),
(b) so that if we port it to another platform (such as Android), the model will still work properly and (c) it led to easy and uniform code

Functions that are intended to be used as arguments in higher order functions are typically named with an underscore prefix for clarity and to avoid namespace clashes with instance fields.
For instance: FNode.getChildren( ShapeSceneNode.this, PieceIconNode.class ).map( _minX ) //uses _minX in a higher order function, whereas minX might be a field that applies directly to an instance
This is the opposite of the convention in FunctionalJava, which is to put the underscore afterwards, such as List's "public static <A> F<List<A>, A> head_()".
However, I prefer putting the underscore first since it seems to read more clearly.

[===================Intro tab===================]
The Intro module uses a novel technique for supporting multiple representations with Property<T> while avoiding looping, please see this ticket for details:
https://phet.unfuddle.com/a#/projects/9404/tickets/by_number/3259
The Intro model has one representation for each view type, and another one called "ContainerSet" to represent a more abstract view of which cells are filled and unfilled.

To summarize, the class ClientProperty provides a way to view when a certain value in the model changes, and describes what to do when
the value is changed from outside of the model.

[===================Build a Fraction tab===================]
This tab is also a standalone sim, for implementation notes, see implementation-notes-build-a-fraction.txt.  It appears as a "top level" package (in the fractions sim) because it is a standalone sim.

[===================Equality Lab tab===================]
This tab is a minor variation on the Intro tab, reusing the entire model and making two copies of the view (one with a different scale factor).  It appears in a package under fractionsintro because it only appears as a tab in that sim.

[===================Fraction Matcher tab===================]
This tab is also a standalone sim, see implementation-notes-fraction-matcher.txt.  It appears as a "top level" package (in the fractions sim) because it is a standalone sim.