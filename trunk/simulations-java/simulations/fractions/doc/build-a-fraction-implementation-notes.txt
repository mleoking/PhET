Build a Fraction uses Piccolo-oriented programming instead of functional programming (which is used in the rest of the fractions project).
More details regarding the trade-offs and decisions are available in phet-functional-programming.pdf

Compared to other PhET simulations at the time of writing, this simulation has a very high amount of piccolo animation.  In some cases,
animations interfere with each other: this is solved with three techniques (depending on the situation):
1. Chaining with a delegate to wait for the completion of the previous animation
2. Setting a flag to indicate whether animation is in progress
3. Waiting a specified amount of time for other animations to finish

Single inheritance is insufficient to capture the cross product of (mixed/non-mixed) x (shapes/numbers), so a more data-driven approach is used for mixed vs non-mixed
(it is a boolean parameter) and inheritance is used for the shapes/numbers scenes.

Nodes are re-used instead of created, which facilitates animation.  Global to local transforms are used to keep nodes in the same place as they move between subtrees.
Also, in this sim, nodes in the toolbox (shape pieces, shape containers, number cards and fraction skeletons) are draggable from the toolbox--
this differs from design of other sims which instead show an icon then create the draggable instance once the mouse is pressed or dragged.

There are 2 types of levels: one in which you build using number cards (see NumberSceneNode), and 1 in which you build using pictures of shape pieces (see ShapeSceneNode).

The levels are declared in ShapeLevelList and NumberLevelList for the first tab.  For the second tab, the levels are declared in MixedNumbersNumberLevelList and MixedNumbersShapeLevelList.
Some levels choose the targets first then come up with cards that can be used to solve the challenges.
Other levels to use the cards first then come up with challenges that can be obtained with those cards.
For the shapes mode in order to come up with good challenges we find all possible solutions then sort by number of cards in the solution and choose from one of the smaller solutions,
so there aren't too many shape cards to move around.

ShapeLevelList declares a postprocessor in the method addWithPostprocessing which resamples from the level until finding one that has a small number of stacks and a small number of cards per stack.
MixedNumbersNumberLevelList declares a postprocessor in the method withDifferentRepresentations which attempts to find a level with different shape types

Most of the difficulty of this simulation comes from trying to support so many different scenarios.  Shape containers can be constructed in a variety of different ways,
and have different initial conditions (starting in play area vs starting in toolbox) and operate at different scales depending on which tab is being used.
In many cases an analytical solution for layouts was impractical and a heuristic trial and error approach was used to fine tune layouts.

Sam Reid
9-18-2012