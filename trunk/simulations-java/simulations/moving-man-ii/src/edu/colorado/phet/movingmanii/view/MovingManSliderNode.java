package edu.colorado.phet.movingmanii.view;

import edu.colorado.phet.common.piccolophet.event.CursorHandler;
import edu.colorado.phet.common.piccolophet.nodes.PhetPPath;
import edu.umd.cs.piccolo.PNode;
import edu.umd.cs.piccolo.event.PBasicInputEventHandler;
import edu.umd.cs.piccolo.event.PInputEvent;

import java.awt.*;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;

/**
 * This component contains both a MovingManChart (supplied by the caller) and a vertical Slider node,
 * which spans the data range of the JFreeChart.
 * This component can be used to display and control an xy dataset.
 *
 * @author Sam Reid
 */
public class MovingManSliderNode extends PNode {
    protected PhetPPath trackPPath;
    protected PNode sliderThumb;
    private Color highlightColor;
    protected double value = 0.0;
    private ArrayList<Listener> listeners = new ArrayList<Listener>();
    private boolean selected = false;//highlight

    public MovingManSliderNode(final PNode sliderThumb, Color highlightColor) {
        this.sliderThumb = sliderThumb;
        this.highlightColor = highlightColor;
        this.sliderThumb.addInputEventListener(new CursorHandler());
        trackPPath = new PhetPPath(new BasicStroke(1), Color.black);
        addChild(trackPPath);
        addChild(sliderThumb);
        sliderThumb.addInputEventListener(new PBasicInputEventHandler() {
            Point2D initDragPoint = null;
            double origY;

            public void mousePressed(PInputEvent event) {
                initDragPoint = event.getPositionRelativeTo(sliderThumb.getParent());
                if (value < getMinRangeValue()) {
                    origY = getMinRangeValue();
                } else if (value > getMaxRangeValue()) {
                    origY = getMaxRangeValue();
                } else {
                    origY = value;
                }
                notifySliderThumbGrabbed();
            }

            public void mouseReleased(PInputEvent event) {
                initDragPoint = null;
            }

            public void mouseDragged(PInputEvent event) {
                if (initDragPoint == null) {
                    mousePressed(event);
                }
                double yCurrent = event.getPositionRelativeTo(sliderThumb.getParent()).getY();
                double nodeDY = yCurrent - initDragPoint.getY();
                double plotDY = viewToModelDY(nodeDY);
                double value = clamp(origY + plotDY);
                notifySliderDragged(value);
            }
        });

        //todo: catch layout changes
//        updateLayout();
//        updateTrackPPath();
    }

    protected void updateLayout() {
        //To change body of created methods use File | Settings | File Templates.
    }

    protected double viewToModelDY(double nodeDY) {
        return 0;//TODO: implement
    }

    protected double getMaxRangeValue() {
        return 100;//TODO: Make field
    }

    protected double getMinRangeValue() {
        return -100;  //TODO: make a field
    }

    private void notifySliderDragged(double value) {
        for (Listener listener : listeners) {
            listener.sliderDragged(value);
        }
    }

    private void notifySliderThumbGrabbed() {
        for (Listener listener : listeners) {
            listener.sliderThumbGrabbed();
        }
    }

    public double clamp(double v) {
        if (v > getMaxRangeValue()) {
            v = getMaxRangeValue();
        }
        if (v < getMinRangeValue()) {
            v = getMinRangeValue();
        }
        return v;
    }

    /**
     * Sets the value of the slider for this chart.
     *
     * @param value the value to set for this controller.
     */
    public void setValue(double value) {
        if (this.value != value) {
            this.value = value;
            updateThumbLocation();
            notifyValueChanged();
        }
    }

    protected void updateThumbLocation() {
        //To change body of created methods use File | Settings | File Templates.
    }

    /**
     * Gets the value of the control slider.
     *
     * @return the value of the control slider.
     */
    public double getValue() {
        return value;
    }

    public void setSelected(boolean selected) {
        this.selected = selected;
        updateTrackPPath();
    }

    private void updateTrackPPath() {
        trackPPath.setStroke(new BasicStroke(selected ? 2 : 1));
        trackPPath.setStrokePaint(selected ? highlightColor : Color.black);
    }

    public Rectangle2D.Double getTrackFullBounds() {
        return trackPPath.getFullBounds();
    }

    public Rectangle2D.Double getThumbFullBounds() {
        return sliderThumb.getFullBounds();
    }

    /**
     * Clients can listen for value change events, whether generated by the slider or another call.
     */
    public static interface Listener {
        void valueChanged();

        void sliderThumbGrabbed();

        void sliderDragged(double value);
    }

    public static class Adapter implements Listener {

        public void valueChanged() {
        }

        public void sliderThumbGrabbed() {
        }

        public void sliderDragged(double value) {
        }
    }

    /**
     * Adds a listener for value change events.
     *
     * @param listener the value change listener.
     */
    public void addListener(MovingManSliderNode.Listener listener) {
        listeners.add(listener);
    }

    private void notifyValueChanged() {
        for (Listener listener : listeners) {
            listener.valueChanged();
        }
    }
}