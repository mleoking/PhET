Implementation notes for beers-law-lab

Package structure is as follows:
- stuff under the "common" subpackage is used by >1 module
- stuff under the "concentration" subpackage is used only by the "Concentration" module
- stuff under the "beerslaw" subpackage is used only by the "Beer's Law" module
- each of the above subpackages is further divided into model and view packages

With the exception of the PCanvas subclasses, all classes in the module-specific view packages are
package private, so that they are not accidentally used in other modules. Unfortunately this pattern
can't be applied to the model packages because they must be visible to the view packages.

Property<T> is used throughout the model and view for storage of properties and notification of changes.

In the "Concentration" module, spatial units (distance, size, location) have no relevance to the model,
so there is no model-view transform. The model uses the view coordinate frame, where positive x is to
the right, and positive y is down. (Had I known during development that units would be relevant in
other modules, I would have used an identity transform here to keep things consistent across modules.
But so it goes when implementation starts before design is completed.)

In the "Beer's Law" module, spatial units *are* relevant, and are in centimeters. In this module we do have
a model-view transform, defined in BeersLawModel. The transform performs scaling only. The orientation
of the axes is the same in model and view coordinate frames; positive x is to the right, positive y is down.

For the purposes of view layout, the origin of view components is generally described in each component's javadoc.
If the origin isn't documented, you can assume the Piccolo default (upper-left).

The "Concentration" and "Beer's Law" modules have very different requirements and models. So you'll notice
that there are 2 different solution models with very little overlap. The solution classes are named
ConcentrationSolution and BeersLawSolution to make it clear which modules they belong to.

I find that I frequently need to change the rendering order and layout of nodes and canvases.
To make this easier, node and canvas constructors typically have this structure:

    public MyNode(...) {

        // instantiate nodes

        // set rendering order (addChild)

        // do layout (setOffset)

        // register property observers
    }