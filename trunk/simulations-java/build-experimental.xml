<!--
================================================================================ 
  
    PhET experimental buildfile
   
    This Ant buildfile contains experimental build task, which are not part 
    of the production build process.
   
================================================================================ 
-->
<project name="PhET experimental buildfile" default="_identify-experimental" basedir=".">

	<!-- imports ancillary build information -->
	<import file="build-ancillary.xml"/>

	<!-- default target, identifies the purpose of this buildfile -->
	<target name="_identify-experimental">
		<echo>This is the PhET experimental buildfile.</echo>
	</target>

	<!-- TODO: PLEASE DOCUMENT ME -->
	<target name="display-stats" depends="_init">
		<phet-display-stats/>
	</target>

	<!-- TODO: PLEASE DOCUMENT ME -->
	<target name="test-imageio" depends="_init">
		<imageio inputfile="/Users/jdegoes/Documents/dev/simulations-java/simulations/balloons/screenshot.jpg"
                 outputfile="/Users/jdegoes/Documents/dev/simulations-java/simulations/balloons/screenshot.png"
                 outputwidth="64"
                 outputheight="64"/>
	</target>

	<!-- TODO: PLEASE DOCUMENT ME -->
	<target name="_test_string_append">
		<var name="flavor.jar.list" value=""/>
		<foreach list="band-structure, covalent-bonds, bound-states" target="_add-flavor-to-path" param="sim.flavor" inheritall="true"
	                 inheritrefs="true"/>
		<echo message="var.list is now ${flavor.jar.list}"/>
	</target>

	<!--a test target for checking whether VPN+tigercat+maverick are working -->
	<target name="_test-maverick-tigercat" depends="_read-username-and-password-prod">
		<echo file="maverick-test-file.txt" message="test text"/>
		<maverick-ssh host="${prod.server.name}" username="${deploy.prod.username}" password="${deploy.prod.password}"
	                      version="2">
			<sftp action="put" remotedir="/web/htdocs/phet/temp" verbose="true">
				<fileset dir=".">
					<include name="*maverick-test-file.txt"/>
				</fileset>
			</sftp>
		</maverick-ssh>
	</target>

	<!-- TODO: PLEASE DOCUMENT ME -->
	<property name="run-junit-tests.reports" value="deploy/reports"/>
	<property name="run-junit-tests.build" value="ant_output/projects/all-sims/jars/all-sims"/>
	<target name="run-junit-tests" depends="_init">
		<!--<phet-build-all-sim-jar shrink="false"/>-->
		<!--Unzip the jar with all source-->
		<delete dir="${run-junit-tests.reports}" verbose="true"/>
		<mkdir dir="${run-junit-tests.reports}"/>
		<junit fork="yes" printsummary="no" haltonfailure="no" timeout="10000">
			<batchtest fork="yes" todir="${run-junit-tests.reports}">
				<fileset dir="${run-junit-tests.build}">
					<include name="**/Z*Tester.class"/>
					<!--<include name="**/*.class"/>-->
				</fileset>
			</batchtest>
			<formatter type="xml"/>
			<classpath path="${run-junit-tests.build}"/>
		</junit>

		<junitreport todir="${run-junit-tests.reports}">
			<fileset dir="${run-junit-tests.reports}">
				<include name="TEST-*.xml"/>
			</fileset>
			<report todir="${run-junit-tests.reports}"/>
		</junitreport>
	</target>

	<!-- Assume sim.name and sim.flavor defined -->
	<property name="bitrock.bin.dir"            value="${dir.build-tools}bitrock/bin/" />
	<property name="bitrock.sim.buildfile.dir"  value="${ant-output}/projects/" />
	<property name="bitrock.buildfile.template" value="${dir.build-tools}phet-build/templates/bitrock-installer-template.xml" />
	<target name="_run-bitrock-installer-builder">
		<!-- Create the directory where the buildfile & installers will be placed -->
		<var name="sim.installer.dir"       value="${bitrock.sim.buildfile.dir}${sim.name}/${sim.flavor}/installer/" />
		<var name="sim.installer.buildfile" value="${sim.installer.dir}${sim.flavor}-installer-buildfile.xml" />

		<mkdir dir="${sim.installer.dir}" />

		<echo message="${os.name}"/>
		<var name="bitrock.exe" value="${bitrock.bin.dir}Builder.app/Contents/MacOS/installbuilder">
		</var>
		<if>
			<equals arg1="${os.name}" arg2="Windows NT (unknown)">
			</equals>
			<then>
				<var name="bitrock.exe" value="${bitrock.bin.dir}builder.exe">
				</var>
			</then>
		</if>
		<echo message="set installer exe to: ${bitrock.exe}"/>
		<!-- Copy the template buildfile to the right location -->

		<create-installer-build-file inputFile="${bitrock.buildfile.template}" outputfile="${sim.installer.buildfile}" project="${sim.name}" flavor="${sim.flavor}"/>

		<!-- Build the installers for this simulation/flavor: -->
		<exec executable="${bitrock.exe}">
			<arg value="build" />
			<arg value="${sim.installer.buildfile}" />
			<arg value="osx"/>
		</exec>
		<exec executable="${bitrock.exe}">
			<arg value="build" />
			<arg value="${sim.installer.buildfile}" />
			<arg value="windows"/>
		</exec>
		<exec executable="${bitrock.exe}">
			<arg value="build" />
			<arg value="${sim.installer.buildfile}" />
			<arg value="linux"/>
		</exec>
		<!-- Build Windows installer bundled with JRE-->
		<!-- copy the installers from bitrock to ${sim.installer.dir} -->

	</target>

	<!-- todo: make sure this build-jar is only called once, in the case of multiple flavors -->
	<!-- todo: copy the jar file to the correct name, i.e. FLAVORDIR.jar -->
	<target name="_build-installer-for-flavor">
		<!-- Generate a Windows ico from the simulation screenshot -->

		<typedef
                name="fileexists"
                classname="${phet-file-exists-classname}"
                classpath="${phetbuild-classpath}"/>
		<var name="flavor.screenshot.file" value="simulations/${sim.name}/deploy/${sim.flavor}-screenshot.png"/>
		<if>
			<fileexists file="${flavor.screenshot.file}"/>
			<then>
			</then>
			<else>
				<var name="flavor.screenshot.file" value="build-tools/phet-build/installer-data/phet-logo.png"/>
			</else>
		</if>
		<echo message="using image file: ${flavor.screenshot.file}"/>
		<imageio inputfile="${flavor.screenshot.file}"
	                 outputfile="${ant-output}/projects/${sim.name}/${sim.flavor}.ico"
	                 outputwidth="64"
	                 outputheight="64"/>

		<!-- Generate a Linux png from the simulation screenshot
	        Work on linux icon is postponed since there is no direct support for command line args in shortcuts.-->


		<!-- Perform a replacement on the installer builder template XML file -->


		<!-- Execute the installer builder for each platform -->
		<antcall target="_run-bitrock-installer-builder" />


		<!-- Perform post-processing on Mac installer file (zip) -->
	</target>

	<!-- TODO: PLEASE DOCUMENT ME -->
	<target name="build-installer" depends="_init, _verify-sim-name-specified, build-jar">
		<!-- add the java auto-detect:
	        On Windows: if no java is available, and the JRE is bundled, must be installed -->
		<phet-list-flavors property="sim.flavors" project="${sim.name}"/>

		<foreach list="${sim.flavors}" target="_build-installer-for-flavor" param="sim.flavor" inheritall="true"/>
	</target>

	<!-- TODO: PLEASE DOCUMENT ME -->
	<target name="build-all-sim-installers" depends="_init, _list-sims" description="Builds all single-sim installers.">
		<foreach list="${phet.simlist}" target="build-installer" param="sim.name" inheritall="true"/>
	</target>
	
	<!-- TODO: PLEASE DOCUMENT ME -->
	<target name="check-translations" depends="_init">
		<check-translations/>
	</target>
	
	<!-- tester for PhetListLocalesTask -->
	<target name="list-locales" depends="_init">
		<phet-list-locales property="locale-list" project="balloons"/>
		<echo message="locales: ${locale-list}"/>
	</target>

</project>