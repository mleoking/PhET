/* Copyright 2007-2009, University of Colorado */
package edu.colorado.phet.common.phetcommon.application;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.URL;
import java.util.*;

import javax.swing.*;
import javax.swing.border.EmptyBorder;

import edu.colorado.phet.common.phetcommon.resources.PhetResources;
import edu.colorado.phet.common.phetcommon.util.IProguardKeepClass;
import edu.colorado.phet.common.phetcommon.view.util.EasyGridBagLayout;
import edu.colorado.phet.common.phetcommon.view.util.SwingUtils;

/**
 * JARLauncher provides functionality for running PhET simulations from double-clickable JAR files.
 * Flavors should be listed in a top level properties file called project.properties (generated by the build process)
 * The launch is performed like so:
 * 1. If there is a single flavor, that flavor is launched immediately.
 * 2. If there are multiple flavors, and a file called "main-flavor.properties" exists, the flavor identified in that properties file is run.
 * 3. If there are multiple flavors and no "main-flavor" is identified, a GUI is displayed for picking and launching a flavor.
 * <p/>
 * This code was adapted from the bound-states flavor launcher: BSLauncher
 * <p/>
 * todo: There is currently no support for specifying an ordering of flavors in the GUI
 *
 * @author Chris Malley (cmalley@pixelzoom.com)
 * @author Sam Reid
 * @version $Revision$
 */
public class JARLauncher extends JFrame implements IProguardKeepClass {

    private static final String LOCALE_PROPERTIES_FILENAME = "locale.properties";

    //----------------------------------------------------------------------------
    // Instance data
    //----------------------------------------------------------------------------

    private SimulationInfo[] info;
    private SimulationInfo selectedSim;

    //----------------------------------------------------------------------------
    // Constructors
    //----------------------------------------------------------------------------

    /**
     * Constructor.
     *
     * @param info an array containing information about all simulations in this project
     */
    public JARLauncher( SimulationInfo[] info ) {
        super();
        this.info = info;
        createUI();
        setResizable( false );
        setDefaultCloseOperation( WindowConstants.EXIT_ON_CLOSE );
    }

    //----------------------------------------------------------------------------
    // User interface construction
    //----------------------------------------------------------------------------

    /*
     * Creates the user interface for the dialog.
     *
     * @param parent the parent Frame
     */

    private void createUI() {

        JComponent inputPanel = createInputPanel();
        JPanel actionsPanel = createActionsPanel();

        JPanel bottomPanel = new JPanel( new BorderLayout() );
        bottomPanel.add( new JSeparator(), BorderLayout.NORTH );
        bottomPanel.add( actionsPanel, BorderLayout.CENTER );

        BorderLayout layout = new BorderLayout( 20, 20 );
        JPanel mainPanel = new JPanel( layout );
        mainPanel.setBorder( new EmptyBorder( 10, 10, 10, 10 ) );
        mainPanel.add( inputPanel, BorderLayout.CENTER );
        mainPanel.add( bottomPanel, BorderLayout.SOUTH );

        getContentPane().add( mainPanel );
        pack();

        //Workaround for the case of many simulations
        if ( getHeight() > Toolkit.getDefaultToolkit().getScreenSize().height * 0.75 ) {
            setSize( getWidth(), (int) ( Toolkit.getDefaultToolkit().getScreenSize().height * 0.75 ) );
        }
    }

    /*
     * Creates dialog's input panel, which contains user controls.
     *
     * @return the input panel
     */
    private JComponent createInputPanel() {

        JLabel instructions = new JLabel( "<html>" +
                                          "This program contains " + info.length + " simulations.<br>" +
                                          "Select the simulation that you wish to start:<br>" +
                                          "</html>" );


        JPanel inputPanel = new JPanel();
        EasyGridBagLayout layout = new EasyGridBagLayout( inputPanel );
        inputPanel.setLayout( layout );
        int row = 0;
        int column = 0;
        layout.addComponent( instructions, row++, column );

        ButtonGroup buttonGroup = new ButtonGroup();
        for ( int i = 0; i < this.info.length; i++ ) {
            String title = info[i].getTitle();
            if ( title == null || title.trim().length() == 0 ) {
                title = info[i].getMainClass().substring( info[i].getMainClass().lastIndexOf( '.' ) + 1 );
            }
            JRadioButton radioButton = new JRadioButton( title, i == 0 );
            final int flavorIndex = i;
            radioButton.addActionListener( new ActionListener() {
                public void actionPerformed( ActionEvent e ) {
                    selectedSim = info[flavorIndex];
                }
            } );
            buttonGroup.add( radioButton );
            layout.addComponent( radioButton, row++, column );
        }
        selectedSim = info[0];
        if ( info.length > 10 ) {//workaround for case of many sims
            return new JScrollPane( inputPanel );
        }
        return inputPanel;
    }

    /*
     * Creates the dialog's actions panel, consisting of a Close button.
     *
     * @return the actions panel
     */
    protected JPanel createActionsPanel() {

        JButton startButton = new JButton( "Start" );
        startButton.addActionListener( new ActionListener() {
            public void actionPerformed( ActionEvent event ) {
                handleStart();
            }
        } );

        JButton cancelButton = new JButton( "Cancel" );
        cancelButton.addActionListener( new ActionListener() {
            public void actionPerformed( ActionEvent event ) {
                handleCancel();
            }
        } );

        final int rows = 1;
        final int columns = 2; /* same as number of buttons! */
        final int hgap = 5;
        final int vgap = 0;
        JPanel buttonPanel = new JPanel( new GridLayout( rows, columns, hgap, vgap ) );
        buttonPanel.add( startButton );
        buttonPanel.add( cancelButton );

        JPanel actionPanel = new JPanel( new FlowLayout() );
        actionPanel.add( buttonPanel );

        return actionPanel;
    }

    //----------------------------------------------------------------------------
    // Event handling
    //----------------------------------------------------------------------------

    /*
     * Handles the "Cancel" button.
     * Closes the dialog and exits.
     */

    private void handleCancel() {
        dispose();
        System.exit( 0 );
    }

    /*
     * Handles the "Start" button.
     * Runs the selected simulation.
     */
    private void handleStart() {
        try {
            selectedSim.launch();
            dispose();
        }
        catch( Exception e ) {
            e.printStackTrace();
            JOptionPane.showMessageDialog( this, e.toString(), "Exception", JOptionPane.ERROR_MESSAGE );
        }
    }

    static class SimulationInfo {

        private final String flavor;
        private final String title;
        private final String mainClass;
        private final String[] args;

        public SimulationInfo( String flavor, String title, String mainClass, String[] args ) {
            this.flavor = flavor;
            this.title = title;
            this.mainClass = mainClass;
            this.args = args;
        }

        public String getTitle() {
            return title;
        }

        public String getMainClass() {
            return mainClass;
        }

        public void launch() throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {
            Class mainClass = Class.forName( getMainClass() );
            final Method main = mainClass.getMethod( "main", new Class[]{String[].class} );
            Thread thread = new Thread( new Runnable() {
                public void run() {
                    try {
                        main.invoke( null, new Object[]{args} );
                    }
                    catch( IllegalAccessException e ) {
                        e.printStackTrace();
                    }
                    catch( InvocationTargetException e ) {
                        e.printStackTrace();
                    }
                }
            } );
            thread.start();
        }

        public String getFlavor() {
            return flavor;
        }
    }

    /*
    *
    */
    private static void setLocaleForOfflineJARs() {
        URL optionsURL = Thread.currentThread().getContextClassLoader().getResource( LOCALE_PROPERTIES_FILENAME );
        if ( optionsURL != null ) {
            Properties optionsProperties = new Properties();
            try {
                optionsProperties.load( optionsURL.openStream() );

                // language (required)
                String language = optionsProperties.getProperty( "language" );
                if ( language != null ) {
                    language = language.trim();
                    System.out.println( "JARLauncher: setting " + PhetResources.PROPERTY_JAVAWS_USER_LANGUAGE + "=" + language );
                    System.setProperty( PhetResources.PROPERTY_JAVAWS_USER_LANGUAGE, language );
                }
                else {
                    System.err.println( "JARLauncher: " + LOCALE_PROPERTIES_FILENAME + " is missing required property " + PhetResources.PROPERTY_JAVAWS_USER_LANGUAGE );
                }

                // country (optional)
                String country = optionsProperties.getProperty( "country" );
                if ( country != null ) {
                    country = country.trim();
                    System.out.println( "JARLauncher: setting " + PhetResources.PROPERTY_JAVAWS_USER_COUNTRY + "=" + country );
                    System.setProperty( PhetResources.PROPERTY_JAVAWS_USER_COUNTRY, country );
                }
            }
            catch( IOException e ) {
                e.printStackTrace();
            }
        }
    }

    private static void launchFlavor( SimulationInfo[] info, String mainFlavor ) throws IllegalAccessException, NoSuchMethodException, InvocationTargetException, ClassNotFoundException {
        for ( int i = 0; i < info.length; i++ ) {
            SimulationInfo simulationInfo = info[i];
            if ( simulationInfo.getFlavor().equals( mainFlavor ) ) {
                simulationInfo.launch();
            }
        }
    }

    private static String[] listFlavors( Properties prop ) {
        Enumeration names = prop.propertyNames();
        HashSet flavors = new HashSet();

        while ( names.hasMoreElements() ) {
            String name = (String) names.nextElement();
            if ( name.toLowerCase().startsWith( "project.flavor" ) ) {
                String suffix = name.substring( "project.flavor.".length() );
                int lastDot = suffix.indexOf( '.' );
                if ( lastDot >= 0 ) {
                    String flavor = suffix.substring( 0, lastDot );
//                    System.out.println( "JARLauncher: flavor = " + flavor );
                    flavors.add( flavor );
                }
            }
        }
        return (String[]) flavors.toArray( new String[flavors.size()] );
    }

    private static SimulationInfo[] getSimInfo( Properties prop, String[] commandlineArgs ) {
        String[] flavors = listFlavors( prop );
        ArrayList fx = new ArrayList();
        for ( int i = 0; i < flavors.length; i++ ) {
            String flavor = flavors[i];
            SimulationInfo f = getFlavor( prop, flavor, commandlineArgs );
            fx.add( f );
        }
        Collections.sort( fx, new Comparator() {
            public int compare( Object o1, Object o2 ) {
                SimulationInfo info1 = (SimulationInfo) o1;
                SimulationInfo info2 = (SimulationInfo) o2;
                return info1.getTitle().compareToIgnoreCase( info2.getTitle() );
            }
        } );
        return (SimulationInfo[]) fx.toArray( new SimulationInfo[fx.size()] );
    }

    private static SimulationInfo getFlavor( Properties prop, String flavor, String[] commandlineArgs ) {
        String mainClass = prop.getProperty( "project.flavor." + flavor + ".mainclass" );
        String title = getTitle( prop, flavor );
        String argsString = prop.getProperty( "project.flavor." + flavor + ".args" );
        String[] args = combineArgs( argsString, commandlineArgs );
        return new SimulationInfo( flavor, title, mainClass, args );
    }

    private static String[] combineArgs( String argsString, String[] commandlineArgs ) {
        // break up argsString into a collection of Strings
        StringTokenizer stringTokenizer = new StringTokenizer( argsString );
        ArrayList list = new ArrayList();
        while ( stringTokenizer.hasMoreTokens() ) {
            list.add( stringTokenizer.nextToken() );
        }
        // add the commandline args to the collection (do this last)
        list.addAll( Arrays.asList( commandlineArgs ) );
        // return an array
        return (String[]) list.toArray( new String[list.size()] );
    }

    private static String getTitle( Properties prop, String flavor ) {
        //todo: this assumes that sims and project names contain - as delimiter instead of _
        //the convention by PhetBuildAllSimJarTask is to create project_sim style names
        if ( new StringTokenizer( flavor, "_" ).countTokens() == 2 ) {
            StringTokenizer st = new StringTokenizer( flavor, "_" );
            String project = st.nextToken();
            String sim = st.nextToken();
            PhetResources resources = new PhetResources( project );
            return resources.getLocalizedString( sim + ".name" );
        }
        else {
            return prop.getProperty( "project.flavor." + flavor + ".title" );
        }
    }

    public static void main( String args[] ) throws IOException, IllegalAccessException, NoSuchMethodException, InvocationTargetException, ClassNotFoundException {
        //Read flavors:
        Properties prop = new Properties();

        String projectPropertiesFilename = "project.properties";
        URL resource = Thread.currentThread().getContextClassLoader().getResource( projectPropertiesFilename );
        if ( resource != null ) {//works running from a JAR file
            prop.load( resource.openStream() );
        }
        else {//fallback plan in case not running in a JAR file
            final File file = new File( projectPropertiesFilename );
            System.out.println( "JARLauncher: attempting to load properties from " + file.getAbsolutePath() );
            prop.load( new FileInputStream( file ) );
        }

        SimulationInfo[] info = getSimInfo( prop, args );
        if ( info.length == 0 ) {
            throw new RuntimeException( "No flavors found." );
        }

        setLocaleForOfflineJARs();

        URL mainURL = Thread.currentThread().getContextClassLoader().getResource( "main-flavor.properties" );
        if ( mainURL != null ) {
            Properties flavorProperties = new Properties();
            flavorProperties.load( mainURL.openStream() );
            String mainFlavor = flavorProperties.getProperty( "main.flavor" );
            System.out.println( "JARLauncher: launching " + mainFlavor );
            launchFlavor( info, mainFlavor );
        }

        else if ( info.length == 1 ) {
            System.out.println( "JARLauncher: found one flavor, launching " + info[0].getTitle() );
            info[0].launch();
        }
        else {
            JARLauncher launcher = new JARLauncher( info );
            SwingUtils.centerWindowOnScreen( launcher );
            launcher.setVisible( true );
        }
    }
}
