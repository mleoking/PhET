
Notes for proper usage and understanding of LWJGL code:


*** Overview

Basic knowledge of OpenGL is recommended. To support software emulation in Windows XP (or if the user doesn't have updated video drivers installed),
we have only used features using OpenGL 1.1 (released in January 1997). This means no shaders (with GLSL) or many other conveniences.

I recommend the "Red book" i.e. http://www.glprogramming.com/red/ "The Official Guide to Learning OpenGL, Version 1.1", as it was very useful.
Specifically chapters 1, 2, 3, 4, 5, 7, and 9 should effectively cover what has been implemented at this time (July 2012).

We are using the LWJGL bindings to OpenGL, which is effectively a very low-level library where we make static calls and those are forwarded to
OpenGL. LWJGL adds in nice keyboard / mouse handling and takes care of a large part of the main display loop. To run OpenGL calls, we need to wait
for LWJGL to initialize (should be ready after LWJGLCanvas's initialize()).

Currently LWJGLCanvas is set up to use LWJGLTab instances, which handle switching tabs in LWJGL simulations (the PhET module system was not flexible
enough to support tab switching without hiding the canvas). Generally, the LWJGLTab's loop() should call Display.sync(), update the necessary state
and make LWJGL graphics calls, and then Display.update(). This will take care of all of the rendering.


*** Scene Graph

For rendering convenience, I've created a scene graph similar to how Piccolo operates, based off of the class GLNode that simplifies many common
OpenGL tasks (such as setting flags before rendering and resetting them to their prior values afterwards, etc.) Much of it is similar to how Piccolo
operates, but see GLNode's documentation for more.

There is also a quite generic GLMaterial interface that allows you to handle the rendering of the shape in a GLNode and the appearance in a
GLMaterial.

//REVIEW say something about how LWJGLCanvas differs from PCanvas. You mentioned this a little bit above, but elaborate a bit
// for the benefit of 2D-sim developers who are familiar with the architecture that has a PCanvas for each Module.


*** Swing / Piccolo Inter-operation and Threading

It is important to note that the LWJGLTab's loop() is running in a separate thread from the Swing EventDispatchThread (EDT). Proper threading is
essential for simulations. Calls to Swing methods (or sometimes Piccolo methods that call Swing methods) should ALWAYS be made from the EDT, and
this can be accomplished best by SwingUtilities.invokeLater(). SwingUtilities.invokeAndWait() used in most situations has a good chance of causing
deadlock on the application exit (System.exit deadlock, extremely similar to http://stackoverflow.com/questions/2270288/java-static-block-shutdown-hook-with-system-exit).
LWJGLUtils.invoke() does the equivalent of SwingUtilities.invokeLater(), but for the LWJGL thread, and all LWJGL-based code (and OpenGL calls)
should be made from the LWJGL thread.

In simulations so far, I have found it most convenient to put the model (and its changes) in the LWJGL thread, and to just wrap interactions with
Swing (or Piccolo in situations explained later) with the necessary thread-changing boilerplate. Essentially, think of it as message-passing.

There are multiple classes devoted to displaying (and sometimes being able to interact) with Swing and Piccolo Components/PNodes.

For interactive interfaces (like control panels and the such that lay orthographically in screen coordinates) use OrthoSwingNode for general
Swing components, or OrthoPiccoloNode for Piccolo nodes. (NOTE: be in the Swing EDT to make Piccolo modifications to the wrapped node)

For (currently, July 2012) non-interactive interfaces that can be rotated to arbitrary angles (although currently are still planar), use
PlanarSwingNode for Swing and either PlanarPiccoloNode or ThreadedPlanarPiccoloNode for Piccolo. PlanarPiccoloNode uses PlanarSwingNode
for its rendering (and thus any changes to the wrapped Piccolo node need to be made in the Swing EDT), however that was causing unnecessary latency
in many actions. ThreadedPlanarPiccoloNode is an improvement for Piccolo that does NOT use Swing or a PCanvas to render the PNode into a texture,
so that changes to the Piccolo node CAN be made in the LWJGL thread. This removes a whole frame (or more) of latency when updating the nodes.
In the future, it should be possible to add input handling to it.

//REVIEW This is a nice threading description. But it needs to be reiterated in important class/method doc, or at least insert
// a note to the reader that they should consult this file.

//REVIEW might want to mention have polytri-core is used, I see it in dependencies




