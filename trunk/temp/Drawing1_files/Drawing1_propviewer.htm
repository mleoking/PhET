
<html>
<head>
<LINK REL="stylesheet" TYPE="text/css" HREF="Drawing1.css">
<script src="Drawing1_utils.js"></script>
<script>
<!--
var labelText = "Field";
var	valueText = "Value";

var g_RowStyleList = new  Array(
 "propViewerEvenRow",
 "propViewerOddRow"
);

function FillPropTable (shapeNode)
{
	var strCPHTML = "";

	if (shapeNode != null)
	{
		// Wrap everything in a big table. 
		strCPHTML = "<TABLE frame='void' rules='none' cellspacing='0' border=0 cols=1 width='100%'><TR><TD>";

		// Create the top "border" line. 
		strCPHTML += "<TABLE class='propViewerLines' frame='void' rules='none' cellspacing='0' height='2pt' border=0 cols=1 width='100%'>";
		strCPHTML += "<TBODY><TR><TD></TD></TR><TR class='propViewer'><TD></TD></TR></TBODY></TABLE>";
		strCPHTML += "</TD></TR><TR><TD>";

		// Create the HTML string.
		strCPHTML += "<TABLE class='propViewerTABLE' border='1' cols=2 width='100%' cellpadding='7' cellspacing='0'><THEAD class='propViewerTHEAD' border=2><TH>" + labelText + "</TH><TH>" + valueText + "</TH></THEAD><TBODY>";

		// Put in the separator between the header and the body. 
		strCPHTML += "<TR class='propViewerHeaderSep'><TD colspan=2></TD></TR>";

		// Look up all the Prop nodes. 
		var propColl = shapeNode.selectNodes ("Prop");

		// Walk the list of Prop nodes to generate the appropriate HTML.
		var propCount = propColl.length;
		for (var count = 0; count < propCount; count++)
		{
			//For each custom property, insert label and value into table.
			strCPHTML += "<TR class='" + g_RowStyleList[count % 2] + "'>";

			var strLabelText = "";
			oPropLabel = propColl.item(count).selectSingleNode("Label/textnode()");
			if (oPropLabel != null)
			{
				strLabelText = oPropLabel.text;
			}
			else
			{
				oPropName = propColl.item(count).attributes.getNamedItem ("Name");
				if (oPropName)
				{
					strLabelText = oPropName.text;
				}
			}

			if (strLabelText.length > 0)
			{
				strCPHTML += "<TD class='propViewerTD'>" + Unquote(strLabelText) + "</TD>";

				// If we found a label, then get the value. 
				strCPHTML += "<TD class='propViewerTD'>"

				var strValueText = "&nbsp;";
				oPropValue = propColl.item(count).selectSingleNode("Value/textnode()");
				if (oPropValue)
				{
					//strCPHTML += "<TD>" + Unquote(oPropValue.text) + "</TD>";
					strValueText = Unquote(oPropValue.text);
				}

				strCPHTML += strValueText + "</TD>";

			}

			strCPHTML += "</TR>";	
		}

		// Did we find any props? 
		if (propCount > 0)
		{
			strCPHTML += "</TBODY></TABLE></TD></TR><TR><TD>";

			// Create the bottom "border" line. 
			strCPHTML += "<TABLE class='propViewerLines' frame='void' rules='none' cellspacing='0' height='2pt' border=0 cols=1 width='100%'>";
			strCPHTML += "<TBODY><TR class='propViewer'><TD></TD></TR><TR class='propViewer'><TD></TD></TR><TR><TD></TD></TR></TBODY></TABLE>";
			strCPHTML += "</TD></TR></TABLE>";
		}
		else
		{
			strCPHTML = "";
		}
	}

	divOutput.innerHTML = strCPHTML;
}


function ResetViewer()
{
	divOutput.innerHTML = "";
}

function CPOnLoad ()
{
	g_theApp.custPropEntryPoint = FillPropTable;
	g_theApp.CPResetFunc = ResetViewer;
}

function CPOnUnload ()
{
	g_theApp.custPropEntryPoint = null;
	g_theApp.CPResetFunc = null;
}

//-->
</script>
</head>
<body onload="CPOnLoad()" onunload="CPOnUnload()">

<DIV class="propViewer" width="100%">
<FONT class="propViewer">Custom Properties</FONT>
<BR>
<BR>
</DIV>


<!-- This is the DIV element that we will use to store the generated HTML -->
<DIV ID=divOutput width="100%"></DIV>

</body>
</html>
