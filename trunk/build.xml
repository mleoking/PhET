<project name="PhET Master Build Script" default="build-all" basedir=".">
    <!--
        NOTE: Targets prefixed with an underscore are meant only for internal 
        use within the Ant build file. These targets do not have any 
        dependencies set and should not be invoked by end-users.
    -->
    <property name="phet.svn.url"           value="https://phet.svn.sourceforge.net/svnroot/phet/trunk/"/>
    <property name="phet.java-sim.url"      value="${phet.svn.url}/simulations-java/"/>
    <property name="simulations.flash"      value="simulations-flash/"/>
    <property name="simulations.java"       value="simulations-java/"/>
    
    <property name="dir.simulations.java"   value="${basedir}/${simulations.java}" />
    <property name="dir.simulations.flash"  value="${basedir}/${simulations.flash}" />
    <property name="dir.phet.common"        value="${basedir}/common/" />
    <property name="dir.build-tools"        value="${basedir}/build-tools/" />
    <property name="dir.contrib"            value="${basedir}/contrib/" />
    <property name="dir.templates"          value="${basedir}/templates/" />
    <property name="dir.templates.java"     value="${dir.templates}simulation-java/" />
    
    <property name="dir.temp"               value="${basedir}/ant_output/" />
    <property name="dir.temp.junit"         value="${dir.temp}junit/"      />
    <property name="dir.temp.projects"      value="${dir.temp}projects/"   />
    
    <property name="file.template.jnlp"     value="${dir.templates.java}webstart.jnlp" />
    <property name="file.template.proguard"     value="${dir.templates.java}proguard.pro" />
    
    <property name="host.dev.server"        value="spot.colorado.edu"     />
    <property name="host.prod.server"       value="tigercat.colorado.edu" />
    <property name="dir.prefix.dev.server"  value="/Net/www/webdata/htdocs/UCB/AcademicAffairs/ArtsSciences/physics/phet/dev/" />
    <property name="dir.prefix.prod.server" value="tigercat.colorado.edu" />
    
    
    <property name="phet.flash-sim.url"     value="${phet.svn.url}${simulations.flash}"/>
    <property name="phet.java-sim.url"      value="${phet.svn.url}${simulations.java}" />
    
    <property name="msg.specify.name.sim"   value="The name of the simulation must be specified." />
    
    <property name="jar.ant-contrib"        value="${dir.build-tools}ant-contrib/ant-contrib-1.0b3.jar" />
    <property name="jar.junit"              value="${dir.build-tools}junit3.8.2/junit.jar" />
    <property name="jar.maverick"           value="${dir.build-tools}maverick/lib/maverick-ant.jar" />
    <property name="jar.antform"            value="${dir.build-tools}antform-bin-2.0beta2/lib/antform.jar" />
    <property name="jar.proguard"            value="${dir.build-tools}proguard3.8/lib/proguard.jar" />

    <property name="name.classes.dir" value="classes" />

    <!--  Set ant output directories.  -->
    <property name="ant.output" value="ant_output"/>
    
    <!-- Ant-Contrib tasks definition -->
    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="${jar.ant-contrib}"/>
        </classpath>
    </taskdef>
    
    <!-- Maverick task definition -->
    <taskdef name="ssh" classname="com.sshtools.ant.Ssh" classpath="${jar.maverick}"/>
    
    <!-- AntForm task definition -->
	<taskdef name="antform" classname="com.sardak.antform.AntForm" classpath="${jar.antform}"/>

    <!--Proguard task definition-->
    <taskdef resource="proguard/ant/task.properties" classpath="${jar.proguard}"/>
    
    <target name="_verify-sim-exists" description="Verifies that the simulation exists" >
        <available file="${dir.project}" type="dir" property="tmp.sim.dir.exists" />
        
        <if>
            <not>
                <isset property="tmp.sim.dir.exists" />
            </not>
            <then>
                <fail message="There is no directory ${dir.project}" />
            </then>
        </if>
    </target>
    
    <target name="_verify-sim-name-specified" description="Verifies that the simulation name has been specified" >
        <if>
            <not>
                <isset property="name.sim"/>
            </not>
            <then>
                <fail message="${msg.specify.name.sim}"/>
            </then>
        </if>
    </target>
    
    <target name="_create-project-properties" description="Creates project properties" if="dir.project">
        <!-- Creates project properties from ${dir.project} -->
        
        <!-- Cleanup the dir.project property: -->
        <if>
            <!-- If there's no slash on the end... -->
            <matches string="${dir.project}" pattern=".*[^/\\]" />
            <then>
                <!-- Add it! -->
                <var name="dir.project" value="${dir.project}/" />
            </then>
        </if>

        <!-- Extract the project shortname from the directory name: -->
        <propertyregex
            property="dir.project.name"
            override="true"
            input="${dir.project}"
            regexp=".*[/\\]([^/\\]+)"
            select="\1"
            casesensitive="false" >
        </propertyregex>
        
        <var name="dir.temp.project"              value="${dir.temp.projects}${dir.project.name}"                       />
        <var name="dir.project.deploy.local"      value="${dir.project}deploy/"                                         />
        <var name="jar.name.project.deploy"       value="${dir.project.name}.jar"                                       />
        <var name="jar.name.project.deploy-pro"   value="${dir.project.name}-pro.jar"                                   />
        <var name="jar.project.deploy.local"      value="${dir.project.deploy.local}${jar.name.project.deploy}"         />
        <var name="jar.project.deploy-pro.local"  value="${dir.project.deploy.local}${jar.name.project.deploy-pro}"    />
        <var name="file.project.properties"       value="${dir.project}data/${dir.project.name}.properties"             />
        <var name="file.project.build.properties" value="${dir.project}build.properties"                                />
    </target>

    <target name="_convert-sim-name-to-project-dir" description="Converts the sim name property into a project directory">
        <var name="dir.project" value="${dir.simulations.java}${name.sim}/" />
    </target>
    
    <target name="_create-sim-properties" description="Creates simulation properties" depends="_convert-sim-name-to-project-dir, _create-project-properties" />
    
    <target name="_load-project-build-properties" description="Loads the build properties for the specified project">
        <!-- Internal task expects ${file.project.build.properties} and ${dir.project.name} to be defined -->
        
        <available file="${file.project.build.properties}" property="build.properties.present"/>
        
        <if>
            <isset property="build.properties.present"/>
            <then>
                <!-- The property file exists; load it -->
                <property file="${file.project.build.properties}"/>
                
                <if>
                    <not>
                        <and>
                            <isset property="project.depends.data"/>
                            <isset property="project.depends.source"/>
                            <isset property="project.depends.lib"/>
                            <isset property="project.mainclass"/>
                            <isset property="project.name"/>
                            <isset property="project.description"/>
                            <isset property="project.screenshot"/> 
                        </and>
                    </not>
                    <then>
                        <fail message="A required property was not present in the build file: project.depends.data, project.depends.source, project.depends.lib, project.mainclass, project.name, project.description, project.screenshot" />
                    </then>
                </if>
            </then>
            <else>
                <if>
                    <or>
                        <not>
                            <isset property="param.ignore.failure" />
                        </not>
                        
                        <isfalse value="param.ignore.failure" />
                    </or>
                            
                    <then>
                        <fail message="The project ${dir.project.name} does not have a build.properties file." />
                    </then>
                </if>
            </else>
        </if>
    </target>
    
    <target name="_sim-build-depends" description="Build preparation" depends="_create-sim-properties, _verify-sim-name-specified, _verify-sim-exists, _load-project-build-properties" />
    
    <target name="_sim-deploy-depends" description="Deployment preparation" depends="_create-sim-properties, _verify-sim-name-specified, _verify-sim-exists">
        <available file="${file.project.properties}" property="tmp.file.sim.properties.is.present" />
        
        <if>
            <not>
                <isset property="tmp.file.sim.properties.is.present" />
            </not>
            <then>
                <fail message="The simulation does not have a property file ${file.project.properties}, which is required for deployment." />
            </then>
        </if>
    </target>
    
    <target name="_find-dependency" description="Finds the specified dependency" >
        <!-- TODO: This target needs to be refactored -->
    
        <!--
            Internal task expects the following to be defined:
            
            ${dir.project}
            ${param.depends}
            
            Optionally, ${param.dependency.type} may be defined as one of 
            "lib", "data", "source".
        -->
        
        <!-- 
            On success, ${param.depends} will be updated with path to dependency
        -->
        
        <var name="tmp.depends.name" value="" />
        
        <!-- For files (like JARs), we look only for their parent directories: -->
        
        <!-- Save the name into ${tmp.depends.name} -->
        <propertyregex
            property="tmp.depends.name"
            override="true"
            input="${param.depends}"
            regexp="(.*[/\\]([^/\\.]+$)?)([^/\\]+\.\w+)?"
            select="\3"
            casesensitive="false" >
        </propertyregex>
        
        <!-- Extract just the path: -->
        <propertyregex
            property="param.depends"
            override="true"
            input="${param.depends}"
            regexp="(.*[/\\]([^/\\.]+$)?)([^/\\]+\.\w+)?"
            select="\1"
            casesensitive="false" >
        </propertyregex>
        
        <var name="tmp.dependency.found" unset="true"/>
        
        <if>
            <and>
                <!-- If this is a library dependency... -->
                <equals arg1="${param.dependency.type}" arg2="lib"/>
                
                <!-- And the user specified a directory... -->
                <equals arg1="${tmp.depends.name}" arg2="" />
                
                <!-- And the user did NOT tack on /deploy/ to the end of the directory... -->
                <not>
                    <matches string="${param.depends}" pattern=".+deploy([/\\]?)" />
                </not>
            </and>
            <then>
                <!-- Then tack on /deploy/ for him: -->
                <var name="tmp.depends.name" value="/deploy/" />
                
                <echo message="User specifying a library directory as a dependency. Adding /deploy/ to end of path." />
            </then>
        </if>
        
        <!-- Look into project build file directory -->
        <available file="${dir.project}${param.depends}" property="tmp.dependency.found" />
        
        <if>
            <isset property="tmp.dependency.found"/>
            
            <then>
                <echo message="Dependency ${param.depends} found in project directory" />
                
                <var name="param.depends" value="${dir.project}${param.depends}"/>
            </then>
            <else>
                <!-- Dependency not stored in project directory. Look into common area: -->
                <available file="${dir.phet.common}${param.depends}" property="tmp.dependency.found" />
                
                <if>
                    <isset property="tmp.dependency.found"/>
                    <then>
                        <echo message="Dependency ${param.depends} found in common directory" />
                        
                        <var name="param.depends" value="${dir.phet.common}${param.depends}"/>
                    </then>
                    <else>
                        <!-- Dependency not stored in common directory. Look into contrib: -->
                        <available file="${dir.contrib}${param.depends}" property="tmp.dependency.found" />
                        
                        <if>
                            <isset property="tmp.dependency.found" />
                            <then>
                                <echo message="Dependency ${param.depends} found in contrib directory" />
                                
                                <var name="param.depends" value="${dir.contrib}${param.depends}"/>
                            </then>
                            <else>
                                <!-- Dependency not stored in contrib directory. Look into simulations area: -->
                                <available file="${dir.simulations.java}${param.depends}" property="tmp.dependency.found" />
                                
                                <if>
                                    <isset property="tmp.dependency.found"/>
                                    <then>
                                        <echo message="Dependency ${param.depends} found in simulations-java directory" />
                                        
                                        <var name="param.depends" value="${dir.simulations.java}${param.depends}"/>
                                    </then>
                                    <else>
                                        <fail message="Dependency ${param.depends} not found anywhere." />
                                    </else>
                                </if>
                            </else>
                        </if>
                        
                        
                    </else>
                </if>
            </else>
        </if>        
        
        <!-- Tack the name onto the end, if any: -->
        <var name="param.depends" value="${param.depends}${tmp.depends.name}" />
        
        <echo message="Resolved dependency as ${param.depends}" />
    </target>
    
    <target name="_inc-build-dependency-list" description="Incrementally builds a dependency list">
        <!--
             Expects @{param.depends} to be set to the current dependency; 
             will incrementally update ${param.all.depends} with dependency.
             The dependency list is comma delimited.
        -->
        
        <!-- Try to find the dependency: -->
        <runtarget target="_find-dependency" />
        
        <!-- Incrementally build the dependency list: -->
        <if>
            <equals arg1="${param.all.depends}" arg2="" />
            <then>
                <var name="param.all.depends" value="${param.depends}" />
            </then>
            <else>
                <var name="param.all.depends" value="${param.all.depends},${param.depends}" />
            </else>
        </if>
    </target>
    
    <target name="_collect-all-dependencies" description="Collects all dependencies">
        <!-- Expects ${dir.project} and ${param.project.depends} to be defined -->
        <!-- On success, ${param.all.depends} contains all resolved dependencies -->
        
        <var name="param.all.depends" value="" />
        
        <for param="foreach.depends" list="${param.project.depends}" delimiter=":" trim="true">
            <sequential>
                <var name="param.depends" value="@{foreach.depends}" />
                
                <antcallback target="_inc-build-dependency-list" return="param.all.depends" />
            </sequential>
        </for>
    </target>
    
    <target name="_build-non-existent-libraries" description="Builds any non-existent libraries" if="param.all.lib.depends">
        <!-- Expects ${param.all.lib.depends} to exist -->
        
        <for param="foreach.lib.depends" list="${param.all.lib.depends}" delimiter="," trim="true">
            <sequential>
                <var name="tmp.lib.depends.pathname" value="@{foreach.lib.depends}" />
                
                <!-- Extract the path of the library:-->
                <propertyregex
                    property="tmp.lib.depends.path"
                    override="true"
                    input="${tmp.lib.depends.pathname}"
                    regexp="(.*[/\\]([^/\\.]+$)?)([^/\\]+\.\w+)?"
                    select="\1"
                    casesensitive="false" >
                </propertyregex>            
                
                <!-- Extract the name of the library: -->
                <propertyregex
                    property="tmp.lib.depends.name"
                    override="true"
                    input="${tmp.lib.depends.pathname}"
                    regexp="(.*[/\\]([^/\\.]+$)?)([^/\\]+\.\w+)?"
                    select="\3"
                    casesensitive="false" >
                </propertyregex>
                
                <if>
                    <!-- If the library name is not specified... -->
                    <equals arg1="${tmp.lib.depends.name}" arg2="" />
                    <then>
                        <!-- The user specified a directory as a library dependency -->
                        
                        <!-- Strip off /deploy/, if it is specified. -->
                        <propertyregex
                            property="tmp.lib.depends.path"
                            override="true"
                            input="${tmp.lib.depends.path}"
                            regexp="(.+)deploy[/\\]?\Z"
                            select="\1"
                            casesensitive="false" >
                        </propertyregex>    
                        
                        <!-- Extract the name of the deepest directory: -->
                        <propertyregex
                            property="tmp.lib.depends.name"
                            override="true"
                            input="${tmp.lib.depends.path}"
                            regexp=".*[/\\]([^/\\]+)"
                            select="\1.jar"
                            casesensitive="false" >
                        </propertyregex>
                        
                        <echo message="Directory specified as a library dependency. Assuming desired library is ${tmp.lib.depends.name}" />
                        
                        <var name="tmp.lib.depends.pathname" value="${tmp.lib.depends.path}/deploy/${tmp.lib.depends.name}" />
                    </then>
                </if>          
                
                <!-- Check to see if the library exists -->
                
                <!-- Pretty printing (path cleanup) -->
                <propertyregex
                    property="tmp.lib.depends.pathname"
                    override="true"
                    input="${tmp.lib.depends.pathname}" 
                    regexp="(\\)|(/+)"
                    replace="/"
                    casesensitive="false" >
                </propertyregex>
                
                <echo message="Looking for library ${tmp.lib.depends.pathname}" />
                
                <available file="${tmp.lib.depends.pathname}" property="tmp.lib.depends.exists" />
                
                <if>
                    <!-- If the library does NOT exist... -->
                    <not>
                        <isset property="tmp.lib.depends.exists" />
                    </not>
                    <then>
                        <echo message="Library does not exist. Must build library from build properties." />
                        
                        <!-- Strip off /deploy/, if it is specified. -->
                        <propertyregex
                            property="tmp.lib.depends.path"
                            override="true"
                            input="${tmp.lib.depends.path}"
                            regexp="(.+)deploy[/\\]?\Z"
                            select="\1"
                            casesensitive="false" >
                        </propertyregex>    
                        
                        <echo message="Looking for build properties file in ${tmp.lib.depends.path}" />
                        
                        <!-- Call the _build-project task: --> 
                        <antcall target="_build-project" inheritAll="false">
                            <param name="dir.project" value="${tmp.lib.depends.path}" />
                        </antcall>
                    </then>
                    <else>
                        <echo message="Library ${tmp.lib.depends.pathname} found" /> 
                    </else>
                </if>                
            </sequential>
        </for>        
    </target>
    
    <target name="_copy-all-resources" description="Copies all resources to the required directory" if="param.required.resource">
        <!-- Internal task expects the following to be defined:
        
             ${param.required.resource}
             ${dir.temp.project}
        -->
        
        <for param="foreach.required.resource" list="${param.required.resource}" delimiter="," trim="true">
            <sequential>
                <if>
                    <matches string="@{foreach.required.resource}" pattern=".+\.(jar|zip)"/>
                    <then>
                        <echo message="Required resource @{foreach.required.resource} is an archive. Unzipping to ${dir.temp.project}" />
                        
                        <unzip src="@{foreach.required.resource}" dest="${dir.temp.project}" />
                    </then>
                    <else>
                        <available file="@{foreach.required.resource}" property="tmp.required.resource.is.directory" type="dir"/>
                        
                        <if>
                            <isset property="tmp.required.resource.is.directory" />
                            <then>
                                <echo message="Required resource @{foreach.required.resource} is a directory. Copying to ${dir.temp.project}" />
                                
                                <copy todir="${dir.temp.project}">
                                    <fileset dir="@{foreach.required.resource}"/>
                                </copy>
                            </then>
                            <else>
                                <echo message="Required resource @{foreach.required.resource} is a file. Copying to ${dir.temp.project}" />
                            
                                <copy file="@{foreach.required.resource}" todir="${dir.temp.project}" />
                            </else>
                        </if>
                    </else>
                </if>
            </sequential>
        </for>
    </target>
    
    <target name="_build-project" description="Builds the specified project" depends="_create-project-properties, _load-project-build-properties" if="dir.project">
        <!-- Internal task expects ${dir.project} to be defined -->
        
        <echo message="Building project in ${dir.project}" />
                
        <!-- Collect all source dependencies into ${param.all.source.depends}: -->
        <antcallback target="_collect-all-dependencies" return="param.all.depends">
            <param name="param.project.depends" value="${project.depends.source}" />
        </antcallback>               
        <var name="param.all.source.depends" value="${param.all.depends}" />

        <!-- Collect all data dependencies into ${param.all.source.depends}: -->
        <antcallback target="_collect-all-dependencies" return="param.all.depends">
            <param name="param.project.depends" value="${project.depends.data}" />
        </antcallback>               
        <var name="param.all.data.depends" value="${param.all.depends}" />
        
        <!-- Collect all lib dependencies into ${param.all.source.depends}: -->
        <antcallback target="_collect-all-dependencies" return="param.all.depends">
            <param name="param.project.depends" value="${project.depends.lib}" />
        </antcallback>               
        <var name="param.all.lib.depends" value="${param.all.depends}" />
        
        <var name="param.all.depends" unset="true" />
        
        <echo message="All source dependencies: ${param.all.source.depends}" />
        <echo message="All data dependencies:   ${param.all.data.depends}" />
        <echo message="All lib dependencies:    ${param.all.lib.depends}" />
        
        <!-- Some libraries may not exist. Execute recursive build to create them: -->
        <antcall target="_build-non-existent-libraries" />
        
        <!-- 
            At this point all libraries exist and can be added to the classpath.
        -->
        <mkdir dir="${dir.temp.project}" />
        
        <!-- Copy all library resources -->
        <echo message="Copying all library resources to ${dir.temp.project}" />
        <antcall target="_copy-all-resources">
            <param name="param.required.resource" value="${param.all.lib.depends}" />
        </antcall>
        
        <!-- Copy all data resources -->
        <echo message="Copying all data resources to ${dir.temp.project}" />
        <antcall target="_copy-all-resources">
            <param name="param.required.resource" value="${param.all.data.depends}" />
        </antcall>
        
        <echo message="Compiling all source files to ${dir.temp.project}" />
        
        <!-- Replace comma delimiters with colons (expected by javac) -->
        <propertyregex
            property="javac.param.all.source.depends"
            override="true"
            input="${param.all.source.depends}"
            regexp=","
            replace=":"
            casesensitive="false" >
        </propertyregex>
        <propertyregex
            property="javac.param.all.lib.depends"
            override="true"
            input="${param.all.lib.depends}"
            regexp=","
            replace=":"
            casesensitive="false" >
        </propertyregex>
        
        <!-- Compile the project! -->
        <javac srcdir="${javac.param.all.source.depends}"
               destdir="${dir.temp.project}"
               classpath="${javac.param.all.lib.depends}"
               debug="on"
               source="1.4"
        />
        
        <!-- Delete the old manifest directory -->
        <delete dir="${dir.temp.project}META-INF" />
        
        <!-- Jar the output -->
        <echo message="Building jar from files in ${dir.temp.project}, to ${jar.project.deploy.local}"/>
        
        <jar basedir="${dir.temp.project}" destfile="${jar.project.deploy.local}" >
            <manifest>
                <attribute name="Manifest-Version" value="1.0" />
                <attribute name="Built-By"         value="${user.name}"/>
                <attribute name="Created-By"       value="PhET Master Build File" />
                <attribute name="Main-Class"       value="${project.mainclass}" />
            </manifest>
        </jar>
    </target>
    
    <target name="_proguard" description="Runs ProGuard on the specified simulation to trim the output size">
        <echo message="copying proguard template to ${dir.temp.project}"/>
        <copy todir="${dir.temp.project}" overwrite="yes">
            <fileset file="${file.template.proguard}"/>
            <filterset>
                <filter token="PROGUARD_IN_JAR"     value="${jar.project.deploy.local}"/>
                <filter token="PROGUARD_OUT_JAR"    value="${jar.project.deploy-pro.local}"/>
                <filter token="MAIN_CLASS"          value="${project.mainclass}"/>
                <filter token="LIBRARY_JARS"        value="-libraryjars  &lt;java.home&gt;/lib/rt.jar"/>
            </filterset>
        </copy>
        <echo message="running proguard for config file=${dir.temp.project}/proguard.pro"/>
        <proguard configuration="${dir.temp.project}/proguard.pro"/>
    </target>
    
    <target name="_make-jnlp" description="Creates a JNLP file for the specified simulation, for use with Java Webstart">
        <copy todir="${dir.project.deploy.local}" overwrite="yes">
            <fileset file="${file.template.jnlp}"/>
            
            <filterset>           
                <filter token="PROJECT.NAME"        value="${project.name}"/>
                <filter token="PROJECT.DESCRIPTION" value="${project.description}"/>
                <filter token="PROJECT.JAR"         value="${dir.project.name}.jar"/>
            </filterset>
        </copy>
    </target>
    
    <target name="test" description="Runs all unit tests for the specified simulation" depends="_sim-build-depends">
        <echo message="Running all unit tests for ${dir.project.name}" />

        <mkdir dir="${dir.temp.junit}" />

        <junit tempdir="${dir.temp.junit}" >
            <classpath>
                <pathelement location="${jar.junit}"/>
            </classpath>
            
            <assertions>
                <enable/>
            </assertions>
            
            <batchtest fork="yes" todir="${dir.temp.junit}">
                <fileset dir="${dir.temp.project}">
                    <include name="**/Z*Tester.class"/>
                </fileset>
            </batchtest>
        </junit>
    </target>
    
    <target name="build" description="Builds the specified simulation" depends="clean, _sim-build-depends, _build-project">
    </target>
    
    <target name="build-proguard" description="" depends="build, _proguard">
    </target>
    
    <target name="clean" depends="_sim-build-depends">
        <echo message="Cleaning up ${dir.temp.projects}${dir.project.name}..." />
        
        <delete dir="${dir.temp.projects}${dir.project.name}" />
    </target>
    
    <target name="_inc-sim-dev-version-number" description="Increments the development version number" >
        <echo message="Incrementing the simulation development version number in property file ${file.project.properties}" />
        
        <propertyfile file="${file.project.properties}">
            <entry key="version.dev" type="int" operation="+" value="1" pattern="00"/>
        </propertyfile>
    </target>
    
    <target name="_reset-sim-dev-version-number" description="Increments the development version number" >
        <echo message="Resetting the simulation development version number in property file ${file.project.properties}" />
    
        <propertyfile file="${file.project.properties}">
            <entry key="version.dev" type="int" operation="=" value="0" pattern="00"/>
        </propertyfile>
    </target>
    
    <target name="_inc-sim-minor-version-number" description="Increments the development version number" >
        <echo message="Incrementing the simulation minor version number..." />
        
        <propertyfile file="${file.project.properties}">
            <entry key="version.minor" type="int" operation="+" value="1" pattern="0"/>
        </propertyfile>
    </target>    
    
    <target name="_set-sim-revision-number" description="Sets the simulation revision number">
        <echo message="Setting the simulation revision number in property file ${file.project.properties}" />
        
        <exec executable="svn" outputproperty="exec.output.svn.info">
            <arg value="info"/>
            <arg value="${dir.project}"/>
        </exec>
        
        <echo message="Svn output = ${exec.output.svn.info}" />
        
        <propertyregex property="number.subversion.revision"
            override="true"
            input="${exec.output.svn.info}"
            regexp="Revision: *(\d+)"
            select="\1"
            casesensitive="false" />
            
        <echo message="Revision number is ${number.subversion.revision}" />
                
        <propertyfile file="${file.project.properties}">
            <entry key="version.revision" type="int" operation="=" value="${number.subversion.revision}"/>
        </propertyfile>
    </target>
    
    <target name="_load-sim-properties" description="Loads simulation-specific properties" >
        <echo message="Loading simulation properties in ${file.project.properties}" />
        
        <property file="${file.project.properties}" prefix="sim." />
    </target>
    
    <target name="_read-username-and-password">
        <if>
            <not>
                <and>
                    <isset property="deploy.username" />
                    <isset property="deploy.password" />
                </and>
            </not>
            <then>
                <echo message="Reading username and password" />
                
                <!-- If the username and password are not set, get them now: -->
                <antform title="Deployment Host Login" width="550" height="300" focus="login">
                    <label>Please enter your username and password that you use to login to the deployment host machine ${deploy.host}.</label>
                    
                    <textProperty label="Username:" property="deploy.username" required="true"/>
                    <textProperty label="Password:" property="deploy.password" required="true" password="true"/>			
                </antform>
            </then>
        </if>
    </target>
    
    <target name="_deploy" description="Deploys to the specified location" depends="_read-username-and-password">
        <!--
        
            Internal deployment task expects the following properties to be defined:
        
            ${deploy.host}              The host
            ${deploy.dir}               The remote dir to create and deploy to.
            ${dir.project.deploy.local}      The local simulation deployment directory, from which files will be copied.
            ${deploy.filter.include}    The include filter to use.
            ${deploy.filter.exclude}    The exclude filter to use.
        
        -->
        <maverick-ssh host="${deploy.host}"
                      username="${deploy.username}"
                      password="${deploy.password}"
                      version="2">
            <sftp action="mkdir" remotedir="${deploy.dir}"/>
            <sftp action="put" remotedir="${deploy.dir}" verbose="true">
                <fileset dir="${dir.project.deploy.local}" casesensitive="yes">
                    <include name="${deploy.filter.include}"/>
                    <exclude name="${deploy.filter.exclude}"/>
                </fileset>
            </sftp>
        </maverick-ssh>        
    </target>
    
    <target name="deploy-dev" description="Deploys a development version of the specified simulation" depends="_sim-deploy-depends, _inc-sim-dev-version-number, _set-sim-revision-number, build-proguard, _load-sim-properties">
        <echo message="Deploying development version of ${dir.project.name}..." />
        
        <antcall target="_deploy" inheritAll="true">
            <param name="deploy.host"           value="${host.dev.server}" />
            <param name="deploy.dir"            value="${dir.prefix.dev.server}${dir.project.name}/${sim.version.major}.${sim.version.minor}.${sim.version.dev}" />
            <param name="deploy.filter.include" value="**/*.*" />
            <param name="deploy.filter.exclude" value="**/.svn" />
        </antcall>
    </target>
    
    <target name="deploy-prod" description="Deploys a production version of the specified simulation" depends="_sim-deploy-depends, deploy-dev, _reset-sim-dev-version-number, _inc-sim-minor-version-number, _set-sim-revision-number, build-proguard, _load-sim-properties">
        <echo message="Deploying production version of ${dir.project.name}..." />
        
        <antcall target="_deploy" inheritAll="true">
            <param name="deploy.host"           value="${host.prod.server}" />
            <param name="deploy.dir"            value="${dir.prefix.prod.server}${dir.project.name}/${sim.version.major}.${sim.version.minor}" />
            <param name="deploy.filter.include" value="**/*.*" />
            <param name="deploy.filter.exclude" value="**/.svn" />
        </antcall>
    </target>    

    <target name="build-all" description="Builds all PhET simulations">
        <foreach param="project.dir" target="build">
            <path>
                <dirset dir="${dir.simulations.java}">
                    <include name="*"/>
                </dirset>
            </path>
        </foreach>
    </target>
    
    <target name="test-all" description="Runs all unit tests in all PhET simulations">
        <foreach param="project.dir" target="test">
            <path>
                <dirset dir="${dir.simulations.java}">
                    <include name="*"/>
                </dirset>
            </path>
        </foreach>
    </target>
    
    <target name="create" description="Creates a new simulation with the specified name">
        
    </target>
    
    <target name="checkout" description="Checks out the specified simulation" depends="_create-sim-properties">
        <if>
            <isset property="name.sim"/>
            <then>
                <mkdir dir="${dir.simulations.java}${dir.project.name}"/>
                <exec executable="svn">
                    <arg value="co"/>
                    <arg value="${phet.java-sim.url}${dir.project.name}"/>
                    <arg value="${dir.simulations.java}"/>
                </exec>
            </then>
            <else>
                <echo message="${msg.specify.name.sim}"/>
            </else>
        </if>
    </target>
    
    <target name="update" description="Updates the specified simulation" depends="_create-sim-properties">
        <if>
            <isset property="name.sim"/>
            <then>
                <exec executable="svn">
                    <arg value="up"/>
                    <arg value="${dir.simulations.java}${dir.project.name}"/>
                </exec>
            </then>
            <else>
                <echo message="${msg.specify.name.sim}"/>
            </else>
        </if>
    </target>
    
    <target name="checkin" description="Checks in the specified simulation" depends="_create-sim-properties">
        <if>
            <isset property="name.sim"/>
            <then>
                <exec executable="svn">
                    <arg value="ci"/>
                    <arg value="${dir.simulations.java}${dir.project.name}"/>
                </exec>
            </then>
            <else>
                <echo message="${msg.specify.name.sim}"/>
            </else>
        </if>
    </target>
</project>